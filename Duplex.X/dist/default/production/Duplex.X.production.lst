

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 10 19:20:35 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F97J60 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataBANK0
    65  001392                     __pidataBANK0:
    66                           	opt stack 0
    67                           
    68                           ;initializer for LCD8init@F5867
    69  001392  1F                 	db	31
    70  001393  1F                 	db	31
    71  001394  00                 	db	0
    72  001395  09                 	db	9
    73  001396  00                 	db	0
    74  001397  04                 	db	4
    75  001398  00                 	db	0
    76  001399  11                 	db	17
    77  00139A  1F                 	db	31
    78  00139B  1F                 	db	31
    79  00139C  00                 	db	0
    80  00139D  15                 	db	21
    81  00139E  11                 	db	17
    82  00139F  05                 	db	5
    83  0013A0  14                 	db	20
    84  0013A1  15                 	db	21
    85  0013A2  12                 	db	18
    86  0013A3  09                 	db	9
    87  0013A4  12                 	db	18
    88  0013A5  09                 	db	9
    89  0013A6  00                 	db	0
    90  0013A7  1F                 	db	31
    91  0013A8  00                 	db	0
    92  0013A9  1F                 	db	31
    93  0013AA  0E                 	db	14
    94  0013AB  08                 	db	8
    95  0013AC  02                 	db	2
    96  0013AD  0E                 	db	14
    97  0013AE  00                 	db	0
    98  0013AF  1F                 	db	31
    99  0013B0  00                 	db	0
   100  0013B1  1F                 	db	31
   101  0000                     _LATE	set	3981
   102  0000                     _LATHbits	set	3984
   103  0000                     _TRISH	set	3993
   104  0000                     _TRISE	set	3990
   105                           
   106                           	psect	smallconst
   107  001000                     __psmallconst:
   108                           	opt stack 0
   109  001000  00                 	db	0
   110  001001                     STR_1:
   111  001001  48                 	db	72	;'H'
   112  001002  65                 	db	101	;'e'
   113  001003  6C                 	db	108	;'l'
   114  001004  6C                 	db	108	;'l'
   115  001005  6F                 	db	111	;'o'
   116  001006  21                 	db	33
   117  001007  00                 	db	0
   118                           
   119                           ; #config settings
   120  001008  00                 	db	0	; dummy byte at the end
   121  0000                     
   122                           	psect	cinit
   123  001314                     __pcinit:
   124                           	opt stack 0
   125  001314                     start_initialization:
   126                           	opt stack 0
   127  001314                     __initialization:
   128                           	opt stack 0
   129                           
   130                           ; Initialize objects allocated to BANK0 (32 bytes)
   131                           ; load TBLPTR registers with __pidataBANK0
   132  001314  0E92               	movlw	low __pidataBANK0
   133  001316  6EF6               	movwf	tblptrl,c
   134  001318  0E13               	movlw	high __pidataBANK0
   135  00131A  6EF7               	movwf	tblptrh,c
   136  00131C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   137  00131E  6EF8               	movwf	tblptru,c
   138  001320  EE00  F082         	lfsr	0,__pdataBANK0
   139  001324  EE10 F020          	lfsr	1,32
   140  001328                     copy_data0:
   141  001328  0009               	tblrd		*+
   142  00132A  CFF5 FFEE          	movff	tablat,postinc0
   143  00132E  50E5               	movf	postdec1,w,c
   144  001330  50E1               	movf	fsr1l,w,c
   145  001332  E1FA               	bnz	copy_data0
   146                           
   147                           ; Clear objects allocated to COMRAM (2 bytes)
   148  001334  6A34               	clrf	(__pbssCOMRAM+1)& (0+255),c
   149  001336  6A33               	clrf	__pbssCOMRAM& (0+255),c
   150  001338                     end_of_initialization:
   151                           	opt stack 0
   152  001338                     __end_of__initialization:
   153                           	opt stack 0
   154  001338  9035               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   155  00133A  9235               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   156  00133C  0100               	movlb	0
   157  00133E  EF2A  F009         	goto	_main	;jump to C main() function
   158                           tblptru	equ	0xFF8
   159                           tblptrh	equ	0xFF7
   160                           tblptrl	equ	0xFF6
   161                           tablat	equ	0xFF5
   162                           postinc0	equ	0xFEE
   163                           postdec1	equ	0xFE5
   164                           fsr1l	equ	0xFE1
   165                           
   166                           	psect	bssCOMRAM
   167  000033                     __pbssCOMRAM:
   168                           	opt stack 0
   169  000033                     _cursorLocation:
   170                           	opt stack 0
   171  000033                     	ds	2
   172                           tblptru	equ	0xFF8
   173                           tblptrh	equ	0xFF7
   174                           tblptrl	equ	0xFF6
   175                           tablat	equ	0xFF5
   176                           postinc0	equ	0xFEE
   177                           postdec1	equ	0xFE5
   178                           fsr1l	equ	0xFE1
   179                           
   180                           	psect	dataBANK0
   181  000082                     __pdataBANK0:
   182                           	opt stack 0
   183  000082                     LCD8init@F5867:
   184                           	opt stack 0
   185  000082                     	ds	32
   186                           tblptru	equ	0xFF8
   187                           tblptrh	equ	0xFF7
   188                           tblptrl	equ	0xFF6
   189                           tablat	equ	0xFF5
   190                           postinc0	equ	0xFEE
   191                           postdec1	equ	0xFE5
   192                           fsr1l	equ	0xFE1
   193                           
   194                           	psect	cstackBANK0
   195  000060                     __pcstackBANK0:
   196                           	opt stack 0
   197  000060                     displayAlphaNumeric@buffer:
   198                           	opt stack 0
   199  000060                     LCD8init@customChar:
   200                           	opt stack 0
   201                           
   202                           ; 32 bytes @ 0x0
   203  000060                     	ds	16
   204  000070                     displayAlphaNumeric@i:
   205                           	opt stack 0
   206                           
   207                           ; 2 bytes @ 0x10
   208  000070                     	ds	16
   209  000080                     LCD8init@i:
   210                           	opt stack 0
   211                           
   212                           ; 2 bytes @ 0x20
   213  000080                     	ds	2
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           postdec1	equ	0xFE5
   220                           fsr1l	equ	0xFE1
   221                           
   222                           	psect	cstackCOMRAM
   223  000001                     __pcstackCOMRAM:
   224                           	opt stack 0
   225  000001                     ??_HighIsr:
   226  000001                     
   227                           ; 1 bytes @ 0x0
   228  000001                     	ds	18
   229  000013                     ??_LowIsr:
   230                           
   231                           ; 1 bytes @ 0x12
   232  000013                     	ds	21
   233  000028                     ?_sprintf:
   234                           	opt stack 0
   235  000028                     delay_ms@x:
   236                           	opt stack 0
   237  000028                     delay_us@x:
   238                           	opt stack 0
   239  000028                     sprintf@sp:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x27
   243  000028                     	ds	2
   244  00002A                     ??_delay_ms:
   245  00002A                     ??_delay_us:
   246  00002A                     sprintf@f:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x29
   250  00002A                     	ds	1
   251  00002B                     delay_ms@i:
   252                           	opt stack 0
   253  00002B                     delay_us@i:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x2A
   257  00002B                     	ds	1
   258  00002C                     sprintf@ap:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x2B
   262  00002C                     	ds	1
   263  00002D                     LCD8send@mode:
   264                           	opt stack 0
   265                           
   266                           ; 1 bytes @ 0x2C
   267  00002D                     	ds	1
   268  00002E                     LCD8send@c:
   269                           	opt stack 0
   270  00002E                     sprintf@flag:
   271                           	opt stack 0
   272                           
   273                           ; 1 bytes @ 0x2D
   274  00002E                     	ds	1
   275  00002F                     sprintf@c:
   276                           	opt stack 0
   277  00002F                     moveCursorTo@row:
   278                           	opt stack 0
   279  00002F                     customGraphics@selectedGraphic:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x2E
   283  00002F                     	ds	1
   284  000030                     displayAlphaNumeric@message:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x2F
   288  000030                     	ds	1
   289  000031                     moveCursorTo@col:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x30
   293  000031                     	ds	1
   294  000032                     
   295                           ; 1 bytes @ 0x31
   296  000032                     	ds	1
   297  000033                     tblptru	equ	0xFF8
   298                           tblptrh	equ	0xFF7
   299                           tblptrl	equ	0xFF6
   300                           tablat	equ	0xFF5
   301                           postinc0	equ	0xFEE
   302                           postdec1	equ	0xFE5
   303                           fsr1l	equ	0xFE1
   304                           
   305                           ; 1 bytes @ 0x32
   306 ;;
   307 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   308 ;;
   309 ;; *************** function _main *****************
   310 ;; Defined at:
   311 ;;		line 27 in file "test.c"
   312 ;; Parameters:    Size  Location     Type
   313 ;;		None
   314 ;; Auto vars:     Size  Location     Type
   315 ;;		None
   316 ;; Return value:  Size  Location     Type
   317 ;;                  1    wreg      void 
   318 ;; Registers used:
   319 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   320 ;; Tracked objects:
   321 ;;		On entry : 0/0
   322 ;;		On exit  : 0/0
   323 ;;		Unchanged: 0/0
   324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   329 ;;Total ram usage:        0 bytes
   330 ;; Hardware stack levels required when called:    6
   331 ;; This function calls:
   332 ;;		_customGraphics
   333 ;;		_delay_ms
   334 ;;		_displayAlphaNumeric
   335 ;;		_initLCDUI
   336 ;;		_moveCursorTo
   337 ;; This function is called by:
   338 ;;		Startup code after reset
   339 ;; This function uses a non-reentrant model
   340 ;;
   341                           
   342                           	psect	text0
   343  001254                     __ptext0:
   344                           	opt stack 0
   345  001254                     _main:
   346                           	opt stack 25
   347                           
   348                           ;test.c: 29: initLCDUI();
   349                           
   350                           ;incstack = 0
   351  001254  ECDF  F009         	call	_initLCDUI	;wreg free
   352                           
   353                           ;test.c: 31: moveCursorTo(1, 1);
   354  001258  0E00               	movlw	0
   355  00125A  6E30               	movwf	moveCursorTo@row+1,c
   356  00125C  0E01               	movlw	1
   357  00125E  6E2F               	movwf	moveCursorTo@row,c
   358  001260  0E00               	movlw	0
   359  001262  6E32               	movwf	moveCursorTo@col+1,c
   360  001264  0E01               	movlw	1
   361  001266  6E31               	movwf	moveCursorTo@col,c
   362  001268  ECB6  F009         	call	_moveCursorTo	;wreg free
   363                           
   364                           ;test.c: 33: displayAlphaNumeric("Hello!");
   365  00126C  0E01               	movlw	low STR_1
   366  00126E  6E30               	movwf	displayAlphaNumeric@message,c
   367  001270  0E10               	movlw	high STR_1
   368  001272  6E31               	movwf	displayAlphaNumeric@message+1,c
   369  001274  ECFD  F008         	call	_displayAlphaNumeric	;wreg free
   370                           
   371                           ;test.c: 35: delay_ms(5000);
   372  001278  0E13               	movlw	19
   373  00127A  6E29               	movwf	delay_ms@x+1,c
   374  00127C  0E88               	movlw	136
   375  00127E  6E28               	movwf	delay_ms@x,c
   376  001280  EC70  F009         	call	_delay_ms	;wreg free
   377                           
   378                           ;test.c: 37: moveCursorTo(2, 1);
   379  001284  0E00               	movlw	0
   380  001286  6E30               	movwf	moveCursorTo@row+1,c
   381  001288  0E02               	movlw	2
   382  00128A  6E2F               	movwf	moveCursorTo@row,c
   383  00128C  0E00               	movlw	0
   384  00128E  6E32               	movwf	moveCursorTo@col+1,c
   385  001290  0E01               	movlw	1
   386  001292  6E31               	movwf	moveCursorTo@col,c
   387  001294  ECB6  F009         	call	_moveCursorTo	;wreg free
   388                           
   389                           ;test.c: 39: customGraphics(0);
   390  001298  0E00               	movlw	0
   391  00129A  6E30               	movwf	customGraphics@selectedGraphic+1,c
   392  00129C  0E00               	movlw	0
   393  00129E  6E2F               	movwf	customGraphics@selectedGraphic,c
   394  0012A0  ECD9  F009         	call	_customGraphics	;wreg free
   395  0012A4                     l96:
   396  0012A4  D7FF               	goto	l96
   397  0012A6                     __end_of_main:
   398                           	opt stack 0
   399                           tblptru	equ	0xFF8
   400                           tblptrh	equ	0xFF7
   401                           tblptrl	equ	0xFF6
   402                           tablat	equ	0xFF5
   403                           postinc0	equ	0xFEE
   404                           postdec1	equ	0xFE5
   405                           fsr1l	equ	0xFE1
   406                           
   407 ;; *************** function _moveCursorTo *****************
   408 ;; Defined at:
   409 ;;		line 25 in file "LCDUI.c"
   410 ;; Parameters:    Size  Location     Type
   411 ;;  row             2   46[COMRAM] int 
   412 ;;  col             2   48[COMRAM] int 
   413 ;; Auto vars:     Size  Location     Type
   414 ;;		None
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg, status,2, status,0, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : 0/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   424 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   427 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   428 ;;Total ram usage:        4 bytes
   429 ;; Hardware stack levels used:    1
   430 ;; Hardware stack levels required when called:    4
   431 ;; This function calls:
   432 ;;		_LCD8send
   433 ;; This function is called by:
   434 ;;		_main
   435 ;;		_clearDisplayAndCursorTo
   436 ;; This function uses a non-reentrant model
   437 ;;
   438                           
   439                           	psect	text1
   440  00136C                     __ptext1:
   441                           	opt stack 0
   442  00136C                     _moveCursorTo:
   443                           	opt stack 26
   444                           
   445                           ;LCDUI.c: 28: cursorLocation = ((row == 2) ? 0xBF + col : 0x7F + col);
   446                           
   447                           ;incstack = 0
   448  00136C  0E02               	movlw	2
   449  00136E  182F               	xorwf	moveCursorTo@row,w,c
   450  001370  1030               	iorwf	moveCursorTo@row+1,w,c
   451  001372  B4D8               	btfsc	status,2,c
   452  001374  D002               	goto	l18
   453  001376  0E7F               	movlw	127
   454  001378  D001               	goto	L1
   455  00137A                     l18:
   456  00137A  0EBF               	movlw	191
   457  00137C                     L1:
   458  00137C  2431               	addwf	moveCursorTo@col,w,c
   459  00137E  6E33               	movwf	_cursorLocation,c
   460  001380  0E00               	movlw	0
   461  001382  2032               	addwfc	moveCursorTo@col+1,w,c
   462  001384  6E34               	movwf	_cursorLocation+1,c
   463                           
   464                           ;LCDUI.c: 30: LCD8send(cursorLocation, 0);
   465  001386  0E00               	movlw	0
   466  001388  6E2D               	movwf	LCD8send@mode,c
   467  00138A  5033               	movf	_cursorLocation,w,c
   468  00138C  EC53  F009         	call	_LCD8send
   469  001390  0012               	return		;funcret
   470  001392                     __end_of_moveCursorTo:
   471                           	opt stack 0
   472                           tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           postinc0	equ	0xFEE
   477                           postdec1	equ	0xFE5
   478                           fsr1l	equ	0xFE1
   479                           status	equ	0xFD8
   480                           
   481 ;; *************** function _initLCDUI *****************
   482 ;; Defined at:
   483 ;;		line 15 in file "LCDUI.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   492 ;; Tracked objects:
   493 ;;		On entry : 0/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   501 ;;Total ram usage:        0 bytes
   502 ;; Hardware stack levels used:    1
   503 ;; Hardware stack levels required when called:    5
   504 ;; This function calls:
   505 ;;		_LCD8init
   506 ;; This function is called by:
   507 ;;		_main
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           	psect	text2
   512  0013BE                     __ptext2:
   513                           	opt stack 0
   514  0013BE                     _initLCDUI:
   515                           	opt stack 25
   516                           
   517                           ;LCDUI.c: 17: LCD8init();
   518                           
   519                           ;incstack = 0
   520  0013BE  EC05  F008         	call	_LCD8init	;wreg free
   521  0013C2  0012               	return		;funcret
   522  0013C4                     __end_of_initLCDUI:
   523                           	opt stack 0
   524                           tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           postinc0	equ	0xFEE
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           status	equ	0xFD8
   532                           
   533 ;; *************** function _LCD8init *****************
   534 ;; Defined at:
   535 ;;		line 11 in file "LCD8.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;		None
   538 ;; Auto vars:     Size  Location     Type
   539 ;;  i               2   32[BANK0 ] int 
   540 ;;  customChar     32    0[BANK0 ] unsigned char [32]
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   551 ;;      Locals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   553 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;Total ram usage:       34 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; Hardware stack levels required when called:    4
   557 ;; This function calls:
   558 ;;		_LCD8send
   559 ;;		_delay_ms
   560 ;;		_delay_us
   561 ;; This function is called by:
   562 ;;		_initLCDUI
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566                           	psect	text3
   567  00100A                     __ptext3:
   568                           	opt stack 0
   569  00100A                     _LCD8init:
   570                           	opt stack 25
   571                           
   572                           ;LCD8.c: 13: TRISE = 0x00;
   573                           
   574                           ;incstack = 0
   575  00100A  0E00               	movlw	0
   576  00100C  6E96               	movwf	3990,c	;volatile
   577                           
   578                           ;LCD8.c: 14: TRISH = 0b11111000;
   579  00100E  0EF8               	movlw	248
   580  001010  6E99               	movwf	3993,c	;volatile
   581                           
   582                           ;LCD8.c: 15: LATHbits.LATH1 = 0;
   583  001012  9290               	bcf	3984,1,c	;volatile
   584                           
   585                           ;LCD8.c: 16: LATHbits.LATH0 = 0;
   586  001014  9090               	bcf	3984,0,c	;volatile
   587                           
   588                           ;LCD8.c: 17: LATHbits.LATH2 = 0;
   589  001016  9490               	bcf	3984,2,c	;volatile
   590                           
   591                           ;LCD8.c: 18: delay_ms(200);
   592  001018  0E00               	movlw	0
   593  00101A  6E29               	movwf	delay_ms@x+1,c
   594  00101C  0EC8               	movlw	200
   595  00101E  6E28               	movwf	delay_ms@x,c
   596  001020  EC70  F009         	call	_delay_ms	;wreg free
   597                           
   598                           ;LCD8.c: 20: LCD8send(0x30,0);
   599  001024  0E00               	movlw	0
   600  001026  6E2D               	movwf	LCD8send@mode,c
   601  001028  0E30               	movlw	48
   602  00102A  EC53  F009         	call	_LCD8send
   603                           
   604                           ;LCD8.c: 21: LCD8send(0x30,0);
   605  00102E  0E00               	movlw	0
   606  001030  6E2D               	movwf	LCD8send@mode,c
   607  001032  0E30               	movlw	48
   608  001034  EC53  F009         	call	_LCD8send
   609                           
   610                           ;LCD8.c: 22: LCD8send(0x30,0);
   611  001038  0E00               	movlw	0
   612  00103A  6E2D               	movwf	LCD8send@mode,c
   613  00103C  0E30               	movlw	48
   614  00103E  EC53  F009         	call	_LCD8send
   615                           
   616                           ;LCD8.c: 23: LCD8send(0x38,0);
   617  001042  0E00               	movlw	0
   618  001044  6E2D               	movwf	LCD8send@mode,c
   619  001046  0E38               	movlw	56
   620  001048  EC53  F009         	call	_LCD8send
   621                           
   622                           ;LCD8.c: 24: LCD8send(0x10,0);
   623  00104C  0E00               	movlw	0
   624  00104E  6E2D               	movwf	LCD8send@mode,c
   625  001050  0E10               	movlw	16
   626  001052  EC53  F009         	call	_LCD8send
   627                           
   628                           ;LCD8.c: 25: LCD8send(0x0F,0);
   629  001056  0E00               	movlw	0
   630  001058  6E2D               	movwf	LCD8send@mode,c
   631  00105A  0E0F               	movlw	15
   632  00105C  EC53  F009         	call	_LCD8send
   633                           
   634                           ;LCD8.c: 26: LCD8send(0x06,0);
   635  001060  0E00               	movlw	0
   636  001062  6E2D               	movwf	LCD8send@mode,c
   637  001064  0E06               	movlw	6
   638  001066  EC53  F009         	call	_LCD8send
   639                           
   640                           ;LCD8.c: 29: char customChar[] = {
   641                           ;LCD8.c: 31: 0x1F,
   642                           ;LCD8.c: 32: 0x1F,
   643                           ;LCD8.c: 33: 0x00,
   644                           ;LCD8.c: 34: 0x09,
   645                           ;LCD8.c: 35: 0x00,
   646                           ;LCD8.c: 36: 0x04,
   647                           ;LCD8.c: 37: 0x00,
   648                           ;LCD8.c: 38: 0x11,
   649                           ;LCD8.c: 40: 0x1F,
   650                           ;LCD8.c: 41: 0x1F,
   651                           ;LCD8.c: 42: 0x00,
   652                           ;LCD8.c: 43: 0x15,
   653                           ;LCD8.c: 44: 0x11,
   654                           ;LCD8.c: 45: 0x05,
   655                           ;LCD8.c: 46: 0x14,
   656                           ;LCD8.c: 47: 0x15,
   657                           ;LCD8.c: 49: 0x12,
   658                           ;LCD8.c: 50: 0x09,
   659                           ;LCD8.c: 51: 0x12,
   660                           ;LCD8.c: 52: 0x09,
   661                           ;LCD8.c: 53: 0x00,
   662                           ;LCD8.c: 54: 0x1F,
   663                           ;LCD8.c: 55: 0x00,
   664                           ;LCD8.c: 56: 0x1F,
   665                           ;LCD8.c: 58: 0x0E,
   666                           ;LCD8.c: 59: 0x08,
   667  00106A  EE20  F082         	lfsr	2,LCD8init@F5867
   668  00106E  EE10  F060         	lfsr	1,LCD8init@customChar
   669  001072  0E1F               	movlw	31
   670  001074                     u141:
   671  001074  CFDB FFE3          	movff	plusw2,plusw1
   672  001078  06E8               	decf	wreg,f,c
   673  00107A  E2FC               	bc	u141
   674                           
   675                           ;LCD8.c: 68: LCD8send(0x40, 0);
   676  00107C  0E00               	movlw	0
   677  00107E  6E2D               	movwf	LCD8send@mode,c
   678  001080  0E40               	movlw	64
   679  001082  EC53  F009         	call	_LCD8send
   680                           
   681                           ;LCD8.c: 69: delay_us(30);
   682  001086  0E00               	movlw	0
   683  001088  6E29               	movwf	delay_us@x+1,c
   684  00108A  0E1E               	movlw	30
   685  00108C  6E28               	movwf	delay_us@x,c
   686  00108E  ECA1  F009         	call	_delay_us	;wreg free
   687                           
   688                           ;LCD8.c: 71: for (int i = 0; i < 64; i++) {
   689  001092  0E00               	movlw	0
   690  001094  0100               	movlb	0	; () banked
   691  001096  6F81               	movwf	(LCD8init@i+1)& (0+255),b
   692  001098  0E00               	movlw	0
   693  00109A  6F80               	movwf	LCD8init@i& (0+255),b
   694  00109C                     l921:
   695                           
   696                           ; BSR set to: 0
   697  00109C  BF81               	btfsc	(LCD8init@i+1)& (0+255),7,b
   698  00109E  D006               	goto	l52
   699  0010A0  5181               	movf	(LCD8init@i+1)& (0+255),w,b
   700  0010A2  E119               	bnz	l933
   701  0010A4  0E40               	movlw	64
   702  0010A6  5D80               	subwf	LCD8init@i& (0+255),w,b
   703  0010A8  B0D8               	btfsc	status,0,c
   704  0010AA  D015               	goto	u160
   705  0010AC                     l52:
   706                           
   707                           ; BSR set to: 0
   708                           ;LCD8.c: 72: LCD8send(customChar[i], 1);
   709                           
   710                           ; BSR set to: 0
   711  0010AC  0E01               	movlw	1
   712  0010AE  6E2D               	movwf	LCD8send@mode,c
   713  0010B0  0E60               	movlw	low LCD8init@customChar
   714  0010B2  2580               	addwf	LCD8init@i& (0+255),w,b
   715  0010B4  6ED9               	movwf	fsr2l,c
   716  0010B6  0E00               	movlw	high LCD8init@customChar
   717  0010B8  2181               	addwfc	(LCD8init@i+1)& (0+255),w,b
   718  0010BA  6EDA               	movwf	fsr2h,c
   719  0010BC  50DF               	movf	indf2,w,c
   720  0010BE  EC53  F009         	call	_LCD8send
   721                           
   722                           ;LCD8.c: 73: delay_us(30);
   723  0010C2  0E00               	movlw	0
   724  0010C4  6E29               	movwf	delay_us@x+1,c
   725  0010C6  0E1E               	movlw	30
   726  0010C8  6E28               	movwf	delay_us@x,c
   727  0010CA  ECA1  F009         	call	_delay_us	;wreg free
   728  0010CE  0100               	movlb	0	; () banked
   729  0010D0  4B80               	infsnz	LCD8init@i& (0+255),f,b
   730  0010D2  2B81               	incf	(LCD8init@i+1)& (0+255),f,b
   731  0010D4  D7E3               	goto	l921
   732  0010D6                     u160:
   733  0010D6                     l933:
   734                           
   735                           ; BSR set to: 0
   736                           ;LCD8.c: 74: }
   737                           ;LCD8.c: 76: LCD8send(0x01,0);
   738  0010D6  0E00               	movlw	0
   739  0010D8  6E2D               	movwf	LCD8send@mode,c
   740  0010DA  0E01               	movlw	1
   741  0010DC  EC53  F009         	call	_LCD8send
   742                           
   743                           ;LCD8.c: 77: delay_ms(100);
   744  0010E0  0E00               	movlw	0
   745  0010E2  6E29               	movwf	delay_ms@x+1,c
   746  0010E4  0E64               	movlw	100
   747  0010E6  6E28               	movwf	delay_ms@x,c
   748  0010E8  EC70  F009         	call	_delay_ms	;wreg free
   749  0010EC  0012               	return		;funcret
   750  0010EE                     __end_of_LCD8init:
   751                           	opt stack 0
   752                           tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           postdec1	equ	0xFE5
   759                           plusw1	equ	0xFE3
   760                           fsr1l	equ	0xFE1
   761                           indf2	equ	0xFDF
   762                           plusw2	equ	0xFDB
   763                           fsr2h	equ	0xFDA
   764                           fsr2l	equ	0xFD9
   765                           status	equ	0xFD8
   766                           
   767 ;; *************** function _displayAlphaNumeric *****************
   768 ;; Defined at:
   769 ;;		line 40 in file "LCDUI.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;  message         2   47[COMRAM] PTR unsigned char 
   772 ;;		 -> STR_1(7), 
   773 ;; Auto vars:     Size  Location     Type
   774 ;;  i               2   16[BANK0 ] int 
   775 ;;  buffer         16    0[BANK0 ] unsigned char [16]
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      void 
   778 ;; Registers used:
   779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;      Totals:         2      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   789 ;;Total ram usage:       20 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    4
   792 ;; This function calls:
   793 ;;		_LCD8send
   794 ;;		_sprintf
   795 ;; This function is called by:
   796 ;;		_main
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text4
   801  0011FA                     __ptext4:
   802                           	opt stack 0
   803  0011FA                     _displayAlphaNumeric:
   804                           	opt stack 26
   805                           
   806                           ;LCDUI.c: 42: char buffer[16];
   807                           ;LCDUI.c: 44: sprintf(buffer, message);
   808                           
   809                           ;incstack = 0
   810  0011FA  0E60               	movlw	low displayAlphaNumeric@buffer
   811  0011FC  6E28               	movwf	sprintf@sp,c
   812  0011FE  0E00               	movlw	high displayAlphaNumeric@buffer
   813  001200  6E29               	movwf	sprintf@sp+1,c
   814  001202  C030  F02A         	movff	displayAlphaNumeric@message,sprintf@f
   815  001206  C031  F02B         	movff	displayAlphaNumeric@message+1,sprintf@f+1
   816  00120A  ECC1  F008         	call	_sprintf	;wreg free
   817                           
   818                           ;LCDUI.c: 46: LCD8send(cursorLocation, 0);
   819  00120E  0E00               	movlw	0
   820  001210  6E2D               	movwf	LCD8send@mode,c
   821  001212  5033               	movf	_cursorLocation,w,c
   822  001214  EC53  F009         	call	_LCD8send
   823                           
   824                           ;LCDUI.c: 48: for (int i=0; buffer[i] != 0; i++) LCD8send(buffer[i], 1);
   825  001218  0E00               	movlw	0
   826  00121A  0100               	movlb	0	; () banked
   827  00121C  6F71               	movwf	(displayAlphaNumeric@i+1)& (0+255),b
   828  00121E  0E00               	movlw	0
   829  001220  6F70               	movwf	displayAlphaNumeric@i& (0+255),b
   830  001222  D00E               	goto	l27
   831  001224                     
   832                           ; BSR set to: 0
   833                           
   834                           ; BSR set to: 0
   835  001224  0E01               	movlw	1
   836  001226  6E2D               	movwf	LCD8send@mode,c
   837  001228  0E60               	movlw	low displayAlphaNumeric@buffer
   838  00122A  2570               	addwf	displayAlphaNumeric@i& (0+255),w,b
   839  00122C  6ED9               	movwf	fsr2l,c
   840  00122E  0E00               	movlw	high displayAlphaNumeric@buffer
   841  001230  2171               	addwfc	(displayAlphaNumeric@i+1)& (0+255),w,b
   842  001232  6EDA               	movwf	fsr2h,c
   843  001234  50DF               	movf	indf2,w,c
   844  001236  EC53  F009         	call	_LCD8send
   845  00123A  0100               	movlb	0	; () banked
   846  00123C  4B70               	infsnz	displayAlphaNumeric@i& (0+255),f,b
   847  00123E  2B71               	incf	(displayAlphaNumeric@i+1)& (0+255),f,b
   848  001240                     l27:
   849                           
   850                           ; BSR set to: 0
   851                           
   852                           ; BSR set to: 0
   853  001240  0E60               	movlw	low displayAlphaNumeric@buffer
   854  001242  2570               	addwf	displayAlphaNumeric@i& (0+255),w,b
   855  001244  6ED9               	movwf	fsr2l,c
   856  001246  0E00               	movlw	high displayAlphaNumeric@buffer
   857  001248  2171               	addwfc	(displayAlphaNumeric@i+1)& (0+255),w,b
   858  00124A  6EDA               	movwf	fsr2h,c
   859  00124C  50DF               	movf	indf2,w,c
   860  00124E  B4D8               	btfsc	status,2,c
   861  001250  0012               	return	
   862  001252  D7E8               	goto	l28
   863  001254                     __end_of_displayAlphaNumeric:
   864                           	opt stack 0
   865                           tblptru	equ	0xFF8
   866                           tblptrh	equ	0xFF7
   867                           tblptrl	equ	0xFF6
   868                           tablat	equ	0xFF5
   869                           postinc0	equ	0xFEE
   870                           wreg	equ	0xFE8
   871                           postdec1	equ	0xFE5
   872                           plusw1	equ	0xFE3
   873                           fsr1l	equ	0xFE1
   874                           indf2	equ	0xFDF
   875                           plusw2	equ	0xFDB
   876                           fsr2h	equ	0xFDA
   877                           fsr2l	equ	0xFD9
   878                           status	equ	0xFD8
   879                           
   880 ;; *************** function _sprintf *****************
   881 ;; Defined at:
   882 ;;		line 492 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;  sp              2   39[COMRAM] PTR unsigned char 
   885 ;;		 -> displayAlphaNumeric@buffer(16), 
   886 ;;  f               2   41[COMRAM] PTR const unsigned char 
   887 ;;		 -> STR_1(7), 
   888 ;; Auto vars:     Size  Location     Type
   889 ;;  tmpval          4    0        struct .
   890 ;;  cp              3    0        PTR const unsigned char 
   891 ;;  ap              2   43[COMRAM] PTR void [1]
   892 ;;		 -> ?_sprintf(2), 
   893 ;;  len             2    0        unsigned int 
   894 ;;  val             2    0        unsigned int 
   895 ;;  c               1   46[COMRAM] char 
   896 ;;  flag            1   45[COMRAM] unsigned char 
   897 ;;  prec            1    0        char 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  2   39[COMRAM] int 
   900 ;; Registers used:
   901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   908 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   910 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   911 ;;Total ram usage:        8 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    2
   914 ;; This function calls:
   915 ;;		Nothing
   916 ;; This function is called by:
   917 ;;		_displayAlphaNumeric
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text5
   922  001182                     __ptext5:
   923                           	opt stack 0
   924  001182                     _sprintf:
   925                           	opt stack 27
   926                           
   927                           ;doprnt.c: 494: va_list ap;
   928                           ;doprnt.c: 499: signed char c;
   929                           ;doprnt.c: 506: signed char prec;
   930                           ;doprnt.c: 508: unsigned char flag;
   931                           ;doprnt.c: 523: union {
   932                           ;doprnt.c: 524: unsigned long vd;
   933                           ;doprnt.c: 525: double integ;
   934                           ;doprnt.c: 526: } tmpval;
   935                           ;doprnt.c: 528: unsigned int val;
   936                           ;doprnt.c: 529: unsigned len;
   937                           ;doprnt.c: 530: const char * cp;
   938                           ;doprnt.c: 533: *ap = __va_start();
   939                           
   940                           ; BSR set to: 0
   941                           ;incstack = 0
   942  001182  0E2C               	movlw	low (?_sprintf+4)
   943  001184  6E2C               	movwf	sprintf@ap,c
   944  001186  0E00               	movlw	high (?_sprintf+4)
   945  001188  6E2D               	movwf	sprintf@ap+1,c
   946                           
   947                           ;doprnt.c: 536: while(c = *f++) {
   948  00118A  D022               	goto	l111
   949  00118C                     
   950                           ;doprnt.c: 538: if(c != '%')
   951  00118C  0E25               	movlw	37
   952  00118E  182F               	xorwf	sprintf@c,w,c
   953  001190  B4D8               	btfsc	status,2,c
   954  001192  D004               	goto	l106
   955  001194  D006               	goto	l110
   956  001196                     l941:
   957  001196  4A28               	infsnz	sprintf@sp,f,c
   958  001198  2A29               	incf	sprintf@sp+1,f,c
   959                           
   960                           ;doprnt.c: 542: continue;
   961  00119A  D01A               	goto	l111
   962  00119C                     l106:
   963                           
   964                           ;doprnt.c: 543: }
   965                           ;doprnt.c: 548: flag = 0;
   966  00119C  0E00               	movlw	0
   967  00119E  6E2E               	movwf	sprintf@flag,c
   968                           
   969                           ;doprnt.c: 635: switch(c = *f++) {
   970  0011A0  D007               	goto	l107
   971  0011A2                     l110:
   972                           
   973                           ;doprnt.c: 809: ((*sp++ = (c)));
   974  0011A2  C028  FFD9         	movff	sprintf@sp,fsr2l
   975  0011A6  C029  FFDA         	movff	sprintf@sp+1,fsr2h
   976  0011AA  C02F  FFDF         	movff	sprintf@c,indf2
   977  0011AE  D7F3               	goto	l941
   978  0011B0                     l107:
   979  0011B0  C02A  FFF6         	movff	sprintf@f,tblptrl
   980  0011B4  C02B  FFF7         	movff	sprintf@f+1,tblptrh
   981  0011B8  4A2A               	infsnz	sprintf@f,f,c
   982  0011BA  2A2B               	incf	sprintf@f+1,f,c
   983  0011BC                     	if	0	;tblptru may be non-zero
   984  0011BC                     	endif
   985  0011BC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   986  0011BC  0E00               	movlw	low (__mediumconst shr (0+16))
   987  0011BE  6EF8               	movwf	tblptru,c
   988  0011C0                     	endif
   989  0011C0  0008               	tblrd		*
   990  0011C2  CFF5 F02F          	movff	tablat,sprintf@c
   991  0011C6  502F               	movf	sprintf@c,w,c
   992                           
   993                           ; Switch size 1, requested type "space"
   994                           ; Number of cases is 1, Range of values is 0 to 0
   995                           ; switch strategies available:
   996                           ; Name         Instructions Cycles
   997                           ; simple_byte            4     3 (average)
   998                           ;	Chosen strategy is simple_byte
   999  0011C8  0A00               	xorlw	0	; case 0
  1000  0011CA  B4D8               	btfsc	status,2,c
  1001  0011CC  D00F               	goto	u180
  1002  0011CE  D7E9               	goto	l110
  1003  0011D0                     l111:
  1004                           
  1005                           ;doprnt.c: 1422: {
  1006  0011D0  C02A  FFF6         	movff	sprintf@f,tblptrl
  1007  0011D4  C02B  FFF7         	movff	sprintf@f+1,tblptrh
  1008  0011D8  4A2A               	infsnz	sprintf@f,f,c
  1009  0011DA  2A2B               	incf	sprintf@f+1,f,c
  1010  0011DC                     	if	0	;tblptru may be non-zero
  1011  0011DC                     	endif
  1012  0011DC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1013  0011DC  0E00               	movlw	low (__mediumconst shr (0+16))
  1014  0011DE  6EF8               	movwf	tblptru,c
  1015  0011E0                     	endif
  1016  0011E0  0008               	tblrd		*
  1017  0011E2  CFF5 F02F          	movff	tablat,sprintf@c
  1018  0011E6  502F               	movf	sprintf@c,w,c
  1019  0011E8  A4D8               	btfss	status,2,c
  1020  0011EA  D7D0               	goto	l105
  1021  0011EC                     u180:
  1022                           
  1023                           ;doprnt.c: 1538: *sp = 0;
  1024                           
  1025                           ;doprnt.c: 1469: }
  1026                           ;doprnt.c: 1533: }
  1027                           ;doprnt.c: 1535: alldone:
  1028  0011EC  C028  FFD9         	movff	sprintf@sp,fsr2l
  1029  0011F0  C029  FFDA         	movff	sprintf@sp+1,fsr2h
  1030  0011F4  0E00               	movlw	0
  1031  0011F6  6EDF               	movwf	indf2,c
  1032  0011F8  0012               	return	
  1033  0011FA                     __end_of_sprintf:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           tblptrl	equ	0xFF6
  1038                           tablat	equ	0xFF5
  1039                           postinc0	equ	0xFEE
  1040                           wreg	equ	0xFE8
  1041                           postdec1	equ	0xFE5
  1042                           plusw1	equ	0xFE3
  1043                           fsr1l	equ	0xFE1
  1044                           indf2	equ	0xFDF
  1045                           plusw2	equ	0xFDB
  1046                           fsr2h	equ	0xFDA
  1047                           fsr2l	equ	0xFD9
  1048                           status	equ	0xFD8
  1049                           
  1050 ;; *************** function _customGraphics *****************
  1051 ;; Defined at:
  1052 ;;		line 51 in file "LCDUI.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  selectedGrap    2   46[COMRAM] int 
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, status,2, status,0, cstack
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1066 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;Total ram usage:        2 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; Hardware stack levels required when called:    4
  1073 ;; This function calls:
  1074 ;;		_LCD8send
  1075 ;; This function is called by:
  1076 ;;		_main
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text6
  1081  0013B2                     __ptext6:
  1082                           	opt stack 0
  1083  0013B2                     _customGraphics:
  1084                           	opt stack 26
  1085                           
  1086                           ;LCDUI.c: 56: LCD8send(0x00+selectedGraphic, 1);
  1087                           
  1088                           ;incstack = 0
  1089  0013B2  0E01               	movlw	1
  1090  0013B4  6E2D               	movwf	LCD8send@mode,c
  1091  0013B6  502F               	movf	customGraphics@selectedGraphic,w,c
  1092  0013B8  EC53  F009         	call	_LCD8send
  1093  0013BC  0012               	return		;funcret
  1094  0013BE                     __end_of_customGraphics:
  1095                           	opt stack 0
  1096                           tblptru	equ	0xFF8
  1097                           tblptrh	equ	0xFF7
  1098                           tblptrl	equ	0xFF6
  1099                           tablat	equ	0xFF5
  1100                           postinc0	equ	0xFEE
  1101                           wreg	equ	0xFE8
  1102                           postdec1	equ	0xFE5
  1103                           plusw1	equ	0xFE3
  1104                           fsr1l	equ	0xFE1
  1105                           indf2	equ	0xFDF
  1106                           plusw2	equ	0xFDB
  1107                           fsr2h	equ	0xFDA
  1108                           fsr2l	equ	0xFD9
  1109                           status	equ	0xFD8
  1110                           
  1111 ;; *************** function _LCD8send *****************
  1112 ;; Defined at:
  1113 ;;		line 80 in file "LCD8.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;  c               1    wreg     unsigned char 
  1116 ;;  mode            1   44[COMRAM] unsigned char 
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  c               1   45[COMRAM] unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, status,2, status,0, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1128 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1129 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1131 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;Total ram usage:        2 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; Hardware stack levels required when called:    3
  1135 ;; This function calls:
  1136 ;;		_delay_ms
  1137 ;;		_delay_us
  1138 ;; This function is called by:
  1139 ;;		_moveCursorTo
  1140 ;;		_displayAlphaNumeric
  1141 ;;		_customGraphics
  1142 ;;		_LCD8init
  1143 ;;		_clearDisplay
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text7
  1148  0012A6                     __ptext7:
  1149                           	opt stack 0
  1150  0012A6                     _LCD8send:
  1151                           	opt stack 26
  1152                           
  1153                           ;incstack = 0
  1154                           ;LCD8send@c stored from wreg
  1155  0012A6  6E2E               	movwf	LCD8send@c,c
  1156                           
  1157                           ;LCD8.c: 82: LATHbits.LATH2 = mode;
  1158  0012A8  B02D               	btfsc	LCD8send@mode,0,c
  1159  0012AA  D002               	bra	u135
  1160  0012AC  9490               	bcf	3984,2,c	;volatile
  1161  0012AE  D001               	bra	u136
  1162  0012B0                     u135:
  1163  0012B0  8490               	bsf	3984,2,c	;volatile
  1164  0012B2                     u136:
  1165                           
  1166                           ;LCD8.c: 83: delay_ms(1);
  1167  0012B2  0E00               	movlw	0
  1168  0012B4  6E29               	movwf	delay_ms@x+1,c
  1169  0012B6  0E01               	movlw	1
  1170  0012B8  6E28               	movwf	delay_ms@x,c
  1171  0012BA  EC70  F009         	call	_delay_ms	;wreg free
  1172                           
  1173                           ;LCD8.c: 85: LATE = c;
  1174  0012BE  C02E  FF8D         	movff	LCD8send@c,3981	;volatile
  1175                           
  1176                           ;LCD8.c: 86: LATHbits.LATH0 = 1;
  1177  0012C2  8090               	bsf	3984,0,c	;volatile
  1178                           
  1179                           ;LCD8.c: 87: delay_us(1);
  1180  0012C4  0E00               	movlw	0
  1181  0012C6  6E29               	movwf	delay_us@x+1,c
  1182  0012C8  0E01               	movlw	1
  1183  0012CA  6E28               	movwf	delay_us@x,c
  1184  0012CC  ECA1  F009         	call	_delay_us	;wreg free
  1185                           
  1186                           ;LCD8.c: 88: LATHbits.LATH0 = 0;
  1187  0012D0  9090               	bcf	3984,0,c	;volatile
  1188                           
  1189                           ;LCD8.c: 89: delay_us(50);
  1190  0012D2  0E00               	movlw	0
  1191  0012D4  6E29               	movwf	delay_us@x+1,c
  1192  0012D6  0E32               	movlw	50
  1193  0012D8  6E28               	movwf	delay_us@x,c
  1194  0012DA  ECA1  F009         	call	_delay_us	;wreg free
  1195  0012DE  0012               	return		;funcret
  1196  0012E0                     __end_of_LCD8send:
  1197                           	opt stack 0
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           postdec1	equ	0xFE5
  1205                           plusw1	equ	0xFE3
  1206                           fsr1l	equ	0xFE1
  1207                           indf2	equ	0xFDF
  1208                           plusw2	equ	0xFDB
  1209                           fsr2h	equ	0xFDA
  1210                           fsr2l	equ	0xFD9
  1211                           status	equ	0xFD8
  1212                           
  1213 ;; *************** function _delay_us *****************
  1214 ;; Defined at:
  1215 ;;		line 15 in file "delay.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;  x               2   39[COMRAM] int 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;  i               2   42[COMRAM] int 
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      void 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2, status,0
  1224 ;; Tracked objects:
  1225 ;;		On entry : 0/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1229 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1231 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1232 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1233 ;;Total ram usage:        5 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; Hardware stack levels required when called:    2
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_LCD8init
  1240 ;;		_LCD8send
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           	psect	text8
  1245  001342                     __ptext8:
  1246                           	opt stack 0
  1247  001342                     _delay_us:
  1248                           	opt stack 26
  1249                           
  1250                           ;delay.c: 17: for (int i = 0; i < x; i++)
  1251                           
  1252                           ;incstack = 0
  1253  001342  0E00               	movlw	0
  1254  001344  6E2C               	movwf	delay_us@i+1,c
  1255  001346  0E00               	movlw	0
  1256  001348  6E2B               	movwf	delay_us@i,c
  1257  00134A  D005               	goto	l68
  1258  00134C                     l69:
  1259                           
  1260                           ;delay.c: 18: {
  1261                           ;delay.c: 19: _delay((unsigned long)((1)*(25000000/4000000.0)));
  1262  00134C  D000               	nop2		;2 cycle nop
  1263  00134E  D000               	nop2		;2 cycle nop
  1264  001350  D000               	nop2		;2 cycle nop
  1265  001352  4A2B               	infsnz	delay_us@i,f,c
  1266  001354  2A2C               	incf	delay_us@i+1,f,c
  1267  001356                     l68:
  1268  001356  5028               	movf	delay_us@x,w,c
  1269  001358  5C2B               	subwf	delay_us@i,w,c
  1270  00135A  502C               	movf	delay_us@i+1,w,c
  1271  00135C  0A80               	xorlw	128
  1272  00135E  6E2A               	movwf	??_delay_us& (0+255),c
  1273  001360  5029               	movf	delay_us@x+1,w,c
  1274  001362  0A80               	xorlw	128
  1275  001364  582A               	subwfb	??_delay_us& (0+255),w,c
  1276  001366  B0D8               	btfsc	status,0,c
  1277  001368  0012               	return	
  1278  00136A  D7F0               	goto	l69
  1279  00136C                     __end_of_delay_us:
  1280                           	opt stack 0
  1281                           tblptru	equ	0xFF8
  1282                           tblptrh	equ	0xFF7
  1283                           tblptrl	equ	0xFF6
  1284                           tablat	equ	0xFF5
  1285                           postinc0	equ	0xFEE
  1286                           wreg	equ	0xFE8
  1287                           postdec1	equ	0xFE5
  1288                           plusw1	equ	0xFE3
  1289                           fsr1l	equ	0xFE1
  1290                           indf2	equ	0xFDF
  1291                           plusw2	equ	0xFDB
  1292                           fsr2h	equ	0xFDA
  1293                           fsr2l	equ	0xFD9
  1294                           status	equ	0xFD8
  1295                           
  1296 ;; *************** function _delay_ms *****************
  1297 ;; Defined at:
  1298 ;;		line 7 in file "delay.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;  x               2   39[COMRAM] int 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  i               2   42[COMRAM] int 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1312 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1313 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1314 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1315 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;Total ram usage:        5 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    2
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_LCD8init
  1323 ;;		_LCD8send
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text9
  1329  0012E0                     __ptext9:
  1330                           	opt stack 0
  1331  0012E0                     _delay_ms:
  1332                           	opt stack 26
  1333                           
  1334                           ;delay.c: 9: for (int i = 0; i < x; i++)
  1335                           
  1336                           ;incstack = 0
  1337  0012E0  0E00               	movlw	0
  1338  0012E2  6E2C               	movwf	delay_ms@i+1,c
  1339  0012E4  0E00               	movlw	0
  1340  0012E6  6E2B               	movwf	delay_ms@i,c
  1341  0012E8  D00A               	goto	l62
  1342  0012EA                     
  1343                           ;delay.c: 10: {
  1344                           ;delay.c: 11: _delay((unsigned long)((1)*(25000000/4000.0)));
  1345  0012EA  0E09               	movlw	9
  1346  0012EC  6E2A               	movwf	??_delay_ms& (0+255),c
  1347  0012EE  0E1C               	movlw	28
  1348  0012F0                     u217:
  1349  0012F0  2EE8               	decfsz	wreg,f,c
  1350  0012F2  D7FE               	bra	u217
  1351  0012F4  2E2A               	decfsz	??_delay_ms& (0+255),f,c
  1352  0012F6  D7FC               	bra	u217
  1353  0012F8  D000               	nop2	
  1354  0012FA  4A2B               	infsnz	delay_ms@i,f,c
  1355  0012FC  2A2C               	incf	delay_ms@i+1,f,c
  1356  0012FE                     l62:
  1357  0012FE  5028               	movf	delay_ms@x,w,c
  1358  001300  5C2B               	subwf	delay_ms@i,w,c
  1359  001302  502C               	movf	delay_ms@i+1,w,c
  1360  001304  0A80               	xorlw	128
  1361  001306  6E2A               	movwf	??_delay_ms& (0+255),c
  1362  001308  5029               	movf	delay_ms@x+1,w,c
  1363  00130A  0A80               	xorlw	128
  1364  00130C  582A               	subwfb	??_delay_ms& (0+255),w,c
  1365  00130E  B0D8               	btfsc	status,0,c
  1366  001310  0012               	return	
  1367  001312  D7EB               	goto	l63
  1368  001314                     __end_of_delay_ms:
  1369                           	opt stack 0
  1370                           tblptru	equ	0xFF8
  1371                           tblptrh	equ	0xFF7
  1372                           tblptrl	equ	0xFF6
  1373                           tablat	equ	0xFF5
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           postdec1	equ	0xFE5
  1377                           plusw1	equ	0xFE3
  1378                           fsr1l	equ	0xFE1
  1379                           indf2	equ	0xFDF
  1380                           plusw2	equ	0xFDB
  1381                           fsr2h	equ	0xFDA
  1382                           fsr2l	equ	0xFD9
  1383                           status	equ	0xFD8
  1384                           
  1385 ;; *************** function _LowIsr *****************
  1386 ;; Defined at:
  1387 ;;		line 22 in file "test.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;		None
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		None
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1405 ;;Total ram usage:       21 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    1
  1408 ;; This function calls:
  1409 ;;		Nothing
  1410 ;; This function is called by:
  1411 ;;		Interrupt level 1
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	intcodelo
  1416  000018                     __pintcodelo:
  1417                           	opt stack 0
  1418  000018                     _LowIsr:
  1419                           	opt stack 25
  1420                           
  1421                           ;incstack = 0
  1422  000018  8035               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1423  00001A  CFD8 F013          	movff	status,??_LowIsr
  1424  00001E  CFE8 F014          	movff	wreg,??_LowIsr+1
  1425  000022  CFE0 F015          	movff	bsr,??_LowIsr+2
  1426  000026  CFFA F016          	movff	pclath,??_LowIsr+3
  1427  00002A  CFFB F017          	movff	pclatu,??_LowIsr+4
  1428  00002E  CFE9 F018          	movff	fsr0l,??_LowIsr+5
  1429  000032  CFEA F019          	movff	fsr0h,??_LowIsr+6
  1430  000036  CFE1 F01A          	movff	fsr1l,??_LowIsr+7
  1431  00003A  CFE2 F01B          	movff	fsr1h,??_LowIsr+8
  1432  00003E  CFD9 F01C          	movff	fsr2l,??_LowIsr+9
  1433  000042  CFDA F01D          	movff	fsr2h,??_LowIsr+10
  1434  000046  CFF3 F01E          	movff	prodl,??_LowIsr+11
  1435  00004A  CFF4 F01F          	movff	prodh,??_LowIsr+12
  1436  00004E  CFF6 F020          	movff	tblptrl,??_LowIsr+13
  1437  000052  CFF7 F021          	movff	tblptrh,??_LowIsr+14
  1438  000056  CFF8 F022          	movff	tblptru,??_LowIsr+15
  1439  00005A  CFF5 F023          	movff	tablat,??_LowIsr+16
  1440  00005E  C035  F024         	movff	btemp,??_LowIsr+17
  1441  000062  C036  F025         	movff	btemp+1,??_LowIsr+18
  1442  000066  C037  F026         	movff	btemp+2,??_LowIsr+19
  1443  00006A  C038  F027         	movff	btemp+3,??_LowIsr+20
  1444  00006E  C027  F038         	movff	??_LowIsr+20,btemp+3
  1445  000072  C026  F037         	movff	??_LowIsr+19,btemp+2
  1446  000076  C025  F036         	movff	??_LowIsr+18,btemp+1
  1447  00007A  C024  F035         	movff	??_LowIsr+17,btemp
  1448  00007E  C023  FFF5         	movff	??_LowIsr+16,tablat
  1449  000082  C022  FFF8         	movff	??_LowIsr+15,tblptru
  1450  000086  C021  FFF7         	movff	??_LowIsr+14,tblptrh
  1451  00008A  C020  FFF6         	movff	??_LowIsr+13,tblptrl
  1452  00008E  C01F  FFF4         	movff	??_LowIsr+12,prodh
  1453  000092  C01E  FFF3         	movff	??_LowIsr+11,prodl
  1454  000096  C01D  FFDA         	movff	??_LowIsr+10,fsr2h
  1455  00009A  C01C  FFD9         	movff	??_LowIsr+9,fsr2l
  1456  00009E  C01B  FFE2         	movff	??_LowIsr+8,fsr1h
  1457  0000A2  C01A  FFE1         	movff	??_LowIsr+7,fsr1l
  1458  0000A6  C019  FFEA         	movff	??_LowIsr+6,fsr0h
  1459  0000AA  C018  FFE9         	movff	??_LowIsr+5,fsr0l
  1460  0000AE  C017  FFFB         	movff	??_LowIsr+4,pclatu
  1461  0000B2  C016  FFFA         	movff	??_LowIsr+3,pclath
  1462  0000B6  C015  FFE0         	movff	??_LowIsr+2,bsr
  1463  0000BA  C014  FFE8         	movff	??_LowIsr+1,wreg
  1464  0000BE  C013  FFD8         	movff	??_LowIsr,status
  1465  0000C2  9035               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1466  0000C4  0010               	retfie	
  1467  0000C6                     __end_of_LowIsr:
  1468                           	opt stack 0
  1469                           pclatu	equ	0xFFB
  1470                           pclath	equ	0xFFA
  1471                           tblptru	equ	0xFF8
  1472                           tblptrh	equ	0xFF7
  1473                           tblptrl	equ	0xFF6
  1474                           tablat	equ	0xFF5
  1475                           prodh	equ	0xFF4
  1476                           prodl	equ	0xFF3
  1477                           postinc0	equ	0xFEE
  1478                           fsr0h	equ	0xFEA
  1479                           fsr0l	equ	0xFE9
  1480                           wreg	equ	0xFE8
  1481                           postdec1	equ	0xFE5
  1482                           plusw1	equ	0xFE3
  1483                           fsr1h	equ	0xFE2
  1484                           fsr1l	equ	0xFE1
  1485                           bsr	equ	0xFE0
  1486                           indf2	equ	0xFDF
  1487                           plusw2	equ	0xFDB
  1488                           fsr2h	equ	0xFDA
  1489                           fsr2l	equ	0xFD9
  1490                           status	equ	0xFD8
  1491                           
  1492 ;; *************** function _HighIsr *****************
  1493 ;; Defined at:
  1494 ;;		line 17 in file "test.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		None
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;Total ram usage:       18 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		Interrupt level 2
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	intcode
  1522  000008                     __pintcode:
  1523                           	opt stack 0
  1524  000008                     _HighIsr:
  1525                           	opt stack 25
  1526                           
  1527                           ;incstack = 0
  1528  000008  8235               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1529  00000A  EF77  F008         	goto	int_func
  1530                           pclatu	equ	0xFFB
  1531                           pclath	equ	0xFFA
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           prodh	equ	0xFF4
  1537                           prodl	equ	0xFF3
  1538                           postinc0	equ	0xFEE
  1539                           fsr0h	equ	0xFEA
  1540                           fsr0l	equ	0xFE9
  1541                           wreg	equ	0xFE8
  1542                           postdec1	equ	0xFE5
  1543                           plusw1	equ	0xFE3
  1544                           fsr1h	equ	0xFE2
  1545                           fsr1l	equ	0xFE1
  1546                           bsr	equ	0xFE0
  1547                           indf2	equ	0xFDF
  1548                           plusw2	equ	0xFDB
  1549                           fsr2h	equ	0xFDA
  1550                           fsr2l	equ	0xFD9
  1551                           status	equ	0xFD8
  1552                           
  1553                           	psect	intcode_body
  1554  0010EE                     __pintcode_body:
  1555                           	opt stack 25
  1556  0010EE                     int_func:
  1557                           	opt stack 25
  1558  0010EE  CFFA F001          	movff	pclath,??_HighIsr
  1559  0010F2  CFFB F002          	movff	pclatu,??_HighIsr+1
  1560  0010F6  CFE9 F003          	movff	fsr0l,??_HighIsr+2
  1561  0010FA  CFEA F004          	movff	fsr0h,??_HighIsr+3
  1562  0010FE  CFE1 F005          	movff	fsr1l,??_HighIsr+4
  1563  001102  CFE2 F006          	movff	fsr1h,??_HighIsr+5
  1564  001106  CFD9 F007          	movff	fsr2l,??_HighIsr+6
  1565  00110A  CFDA F008          	movff	fsr2h,??_HighIsr+7
  1566  00110E  CFF3 F009          	movff	prodl,??_HighIsr+8
  1567  001112  CFF4 F00A          	movff	prodh,??_HighIsr+9
  1568  001116  CFF6 F00B          	movff	tblptrl,??_HighIsr+10
  1569  00111A  CFF7 F00C          	movff	tblptrh,??_HighIsr+11
  1570  00111E  CFF8 F00D          	movff	tblptru,??_HighIsr+12
  1571  001122  CFF5 F00E          	movff	tablat,??_HighIsr+13
  1572  001126  C035  F00F         	movff	btemp,??_HighIsr+14
  1573  00112A  C036  F010         	movff	btemp+1,??_HighIsr+15
  1574  00112E  C037  F011         	movff	btemp+2,??_HighIsr+16
  1575  001132  C038  F012         	movff	btemp+3,??_HighIsr+17
  1576  001136  C012  F038         	movff	??_HighIsr+17,btemp+3
  1577  00113A  C011  F037         	movff	??_HighIsr+16,btemp+2
  1578  00113E  C010  F036         	movff	??_HighIsr+15,btemp+1
  1579  001142  C00F  F035         	movff	??_HighIsr+14,btemp
  1580  001146  C00E  FFF5         	movff	??_HighIsr+13,tablat
  1581  00114A  C00D  FFF8         	movff	??_HighIsr+12,tblptru
  1582  00114E  C00C  FFF7         	movff	??_HighIsr+11,tblptrh
  1583  001152  C00B  FFF6         	movff	??_HighIsr+10,tblptrl
  1584  001156  C00A  FFF4         	movff	??_HighIsr+9,prodh
  1585  00115A  C009  FFF3         	movff	??_HighIsr+8,prodl
  1586  00115E  C008  FFDA         	movff	??_HighIsr+7,fsr2h
  1587  001162  C007  FFD9         	movff	??_HighIsr+6,fsr2l
  1588  001166  C006  FFE2         	movff	??_HighIsr+5,fsr1h
  1589  00116A  C005  FFE1         	movff	??_HighIsr+4,fsr1l
  1590  00116E  C004  FFEA         	movff	??_HighIsr+3,fsr0h
  1591  001172  C003  FFE9         	movff	??_HighIsr+2,fsr0l
  1592  001176  C002  FFFB         	movff	??_HighIsr+1,pclatu
  1593  00117A  C001  FFFA         	movff	??_HighIsr,pclath
  1594  00117E  9235               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1595  001180  0011               	retfie		f
  1596  001182                     __end_of_HighIsr:
  1597                           	opt stack 0
  1598                           pclatu	equ	0xFFB
  1599                           pclath	equ	0xFFA
  1600                           tblptru	equ	0xFF8
  1601                           tblptrh	equ	0xFF7
  1602                           tblptrl	equ	0xFF6
  1603                           tablat	equ	0xFF5
  1604                           prodh	equ	0xFF4
  1605                           prodl	equ	0xFF3
  1606                           postinc0	equ	0xFEE
  1607                           fsr0h	equ	0xFEA
  1608                           fsr0l	equ	0xFE9
  1609                           wreg	equ	0xFE8
  1610                           postdec1	equ	0xFE5
  1611                           plusw1	equ	0xFE3
  1612                           fsr1h	equ	0xFE2
  1613                           fsr1l	equ	0xFE1
  1614                           bsr	equ	0xFE0
  1615                           indf2	equ	0xFDF
  1616                           plusw2	equ	0xFDB
  1617                           fsr2h	equ	0xFDA
  1618                           fsr2l	equ	0xFD9
  1619                           status	equ	0xFD8
  1620                           pclatu	equ	0xFFB
  1621                           pclath	equ	0xFFA
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           tblptrl	equ	0xFF6
  1625                           tablat	equ	0xFF5
  1626                           prodh	equ	0xFF4
  1627                           prodl	equ	0xFF3
  1628                           postinc0	equ	0xFEE
  1629                           fsr0h	equ	0xFEA
  1630                           fsr0l	equ	0xFE9
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           plusw1	equ	0xFE3
  1634                           fsr1h	equ	0xFE2
  1635                           fsr1l	equ	0xFE1
  1636                           bsr	equ	0xFE0
  1637                           indf2	equ	0xFDF
  1638                           plusw2	equ	0xFDB
  1639                           fsr2h	equ	0xFDA
  1640                           fsr2l	equ	0xFD9
  1641                           status	equ	0xFD8
  1642                           
  1643                           	psect	rparam
  1644  0000                     pclatu	equ	0xFFB
  1645                           pclath	equ	0xFFA
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           prodh	equ	0xFF4
  1651                           prodl	equ	0xFF3
  1652                           postinc0	equ	0xFEE
  1653                           fsr0h	equ	0xFEA
  1654                           fsr0l	equ	0xFE9
  1655                           wreg	equ	0xFE8
  1656                           postdec1	equ	0xFE5
  1657                           plusw1	equ	0xFE3
  1658                           fsr1h	equ	0xFE2
  1659                           fsr1l	equ	0xFE1
  1660                           bsr	equ	0xFE0
  1661                           indf2	equ	0xFDF
  1662                           plusw2	equ	0xFDB
  1663                           fsr2h	equ	0xFDA
  1664                           fsr2l	equ	0xFD9
  1665                           status	equ	0xFD8
  1666                           
  1667                           	psect	temp
  1668  000035                     btemp:
  1669                           	opt stack 0
  1670  000035                     	ds	1
  1671  0000                     int$flags	set	btemp
  1672  0000                     wtemp6	set	btemp+1
  1673                           pclatu	equ	0xFFB
  1674                           pclath	equ	0xFFA
  1675                           tblptru	equ	0xFF8
  1676                           tblptrh	equ	0xFF7
  1677                           tblptrl	equ	0xFF6
  1678                           tablat	equ	0xFF5
  1679                           prodh	equ	0xFF4
  1680                           prodl	equ	0xFF3
  1681                           postinc0	equ	0xFEE
  1682                           fsr0h	equ	0xFEA
  1683                           fsr0l	equ	0xFE9
  1684                           wreg	equ	0xFE8
  1685                           postdec1	equ	0xFE5
  1686                           plusw1	equ	0xFE3
  1687                           fsr1h	equ	0xFE2
  1688                           fsr1l	equ	0xFE1
  1689                           bsr	equ	0xFE0
  1690                           indf2	equ	0xFDF
  1691                           plusw2	equ	0xFDB
  1692                           fsr2h	equ	0xFDA
  1693                           fsr2l	equ	0xFD9
  1694                           status	equ	0xFD8


Data Sizes:
    Strings     7
    Constant    0
    Data        32
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      52
    BANK0           160     34      66
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> displayAlphaNumeric@buffer(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    displayAlphaNumeric@message	PTR unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_moveCursorTo
    _moveCursorTo->_LCD8send
    _LCD8init->_LCD8send
    _displayAlphaNumeric->_sprintf
    _customGraphics->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in COMRAM

    None.

Critical Paths under _HighIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _initLCDUI->_LCD8init

Critical Paths under _LowIsr in BANK0

    None.

Critical Paths under _HighIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowIsr in BANK1

    None.

Critical Paths under _HighIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowIsr in BANK2

    None.

Critical Paths under _HighIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowIsr in BANK3

    None.

Critical Paths under _HighIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowIsr in BANK4

    None.

Critical Paths under _HighIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowIsr in BANK5

    None.

Critical Paths under _HighIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowIsr in BANK6

    None.

Critical Paths under _HighIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowIsr in BANK7

    None.

Critical Paths under _HighIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowIsr in BANK8

    None.

Critical Paths under _HighIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowIsr in BANK9

    None.

Critical Paths under _HighIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowIsr in BANK10

    None.

Critical Paths under _HighIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowIsr in BANK11

    None.

Critical Paths under _HighIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowIsr in BANK12

    None.

Critical Paths under _HighIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowIsr in BANK13

    None.

Critical Paths under _HighIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _LowIsr in BANK14

    None.

Critical Paths under _HighIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _LowIsr in BANK15

    None.

Critical Paths under _HighIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9850
                     _customGraphics
                           _delay_ms
                _displayAlphaNumeric
                          _initLCDUI
                       _moveCursorTo
 ---------------------------------------------------------------------------------
 (1) _moveCursorTo                                         4     0      4    2406
                                             46 COMRAM     4     0      4
                           _LCD8send
 ---------------------------------------------------------------------------------
 (1) _initLCDUI                                            0     0      0    2676
                           _LCD8init
 ---------------------------------------------------------------------------------
 (2) _LCD8init                                            34    34      0    2676
                                              0 BANK0     34    34      0
                           _LCD8send
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _displayAlphaNumeric                                 20    18      2    2436
                                             47 COMRAM     2     0      2
                                              0 BANK0     18    18      0
                           _LCD8send
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             20    16      4     334
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _customGraphics                                       2     0      2    1982
                                             46 COMRAM     2     0      2
                           _LCD8send
 ---------------------------------------------------------------------------------
 (2) _LCD8send                                             2     1      1    1884
                                             44 COMRAM     2     1      1
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     3      2     350
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             5     3      2     350
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowIsr                                              21    21      0       0
                                             18 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighIsr                                             18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _customGraphics
     _LCD8send
       _delay_ms
       _delay_us
   _delay_ms
   _displayAlphaNumeric
     _LCD8send
       _delay_ms
       _delay_us
     _sprintf
   _initLCDUI
     _LCD8init
       _LCD8send
         _delay_ms
         _delay_us
       _delay_ms
       _delay_us
   _moveCursorTo
     _LCD8send
       _delay_ms
       _delay_us

 _LowIsr (ROOT)

 _HighIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0       0      38        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      42       5       41.2%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      34       1       55.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      76      29        0.0%
DATA                 0      0      76       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 10 19:20:35 2018

                           l18 137A                             l27 1240                             l28 1224  
                           l52 10AC                             l62 12FE                             l63 12EA  
                           l68 1356                             l69 134C                             l96 12A4  
                           bsr 000FE0                            l110 11A2                            l111 11D0  
                          l105 118C                            l106 119C                            l107 11B0  
                          l921 109C                            l941 1196                            l933 10D6  
                          u141 1074                            u135 12B0                            u136 12B2  
                          u160 10D6                            u217 12F0                            u180 11EC  
                          wreg 000FE8                   __CFG_FOSC$HS 000000           displayAlphaNumeric@i 0070  
                 __CFG_WDT$OFF 000000                           STR_1 1001                           _LATE 000F8D  
                         _main 1254                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 0035  
                         prodh 000FF4                           prodl 000FF3                           start 00C6  
              __end_of_HighIsr 1182                   ___param_bank 000000               __end_of_LCD8init 10EE  
             __end_of_LCD8send 12E0               ??_customGraphics 0031                moveCursorTo@col 0031  
              moveCursorTo@row 002F                          ?_main 0001                          _TRISE 000F96  
                        _TRISH 000F99                          pclath 000FFA                          tablat 000FF5  
                        plusw1 000FE3                          plusw2 000FDB                          status 000FD8  
                        wtemp6 0036                __end_of_sprintf 11FA                __initialization 1314  
                 __end_of_main 12A6                         ??_main 0033                  __activetblptr 000003  
                    ??_HighIsr 0001               __end_of_delay_ms 1314               __end_of_delay_us 136C  
               __CFG_XINST$OFF 000000                         _LowIsr 0018                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                    ??_sprintf 002C                      LCD8init@i 0080                      LCD8send@c 002E  
                    ?_LCD8init 0001                      ?_LCD8send 002D                     __accesstop 0060  
      __end_of__initialization 1338                  ___rparam_used 000001                 __pcstackCOMRAM 0001  
                 __pidataBANK0 1392    __end_of_displayAlphaNumeric 1254             __size_of_initLCDUI 0006  
                   ??_LCD8init 002F                     ??_LCD8send 002E                        ?_LowIsr 0001  
                ?_moveCursorTo 002F                      ?_delay_ms 0028                      ?_delay_us 0028  
                      _HighIsr 0008                        __Hparam 0000                        __Lparam 0000  
              __size_of_LowIsr 00AE                 ??_moveCursorTo 0033                   __psmallconst 1000  
            __end_of_initLCDUI 13C4                        __pcinit 1314                        __ramtop 1000  
                      __ptext0 1254                        __ptext1 136C                        __ptext2 13BE  
                      __ptext3 100A                        __ptext4 11FA                        __ptext5 1182  
                      __ptext6 13B2                        __ptext7 12A6                        __ptext8 1342  
                      __ptext9 12E0                     ??_delay_ms 002A                     ??_delay_us 002A  
   displayAlphaNumeric@message 0030                        _sprintf 1182                 __pintcode_body 10EE  
         end_of_initialization 1338                        int_func 10EE                        postdec1 000FE5  
                      postinc0 000FEE        __size_of_customGraphics 000C              __size_of_LCD8init 00E4  
            __size_of_LCD8send 003A                 __end_of_LowIsr 00C6            start_initialization 1314  
         __end_of_moveCursorTo 1392                       ??_LowIsr 0013                    __pdataBANK0 0082  
                  __pbssCOMRAM 0033                  __pcstackBANK0 0060   __size_of_displayAlphaNumeric 005A  
            __size_of_delay_ms 0034              __size_of_delay_us 002A                    sprintf@flag 002E  
                     ?_HighIsr 0001                      __pintcode 0008                 _cursorLocation 0033  
                  __pintcodelo 0018                    __smallconst 1000                      _initLCDUI 13BE  
               _customGraphics 13B2                       ?_sprintf 0028                       _LCD8init 100A  
                     _LCD8send 12A6                      delay_ms@i 002B                      delay_ms@x 0028  
                     _LATHbits 000F90                      delay_us@i 002B                      delay_us@x 0028  
       __end_of_customGraphics 13BE                     ?_initLCDUI 0001          __size_of_moveCursorTo 0026  
                    copy_data0 1328             LCD8init@customChar 0060               __size_of_HighIsr 117A  
                     __Hrparam 0000                       __Lrparam 0000                   _moveCursorTo 136C  
              ?_customGraphics 002F                       _delay_ms 12E0                       _delay_us 1342  
             __size_of_sprintf 0078                  LCD8init@F5867 0082                  __size_of_main 0052  
          _displayAlphaNumeric 11FA                       int$flags 0035                    ??_initLCDUI 002F  
         ?_displayAlphaNumeric 0030                       intlevel1 0000                       intlevel2 0000  
                    sprintf@ap 002C                      sprintf@sp 0028      displayAlphaNumeric@buffer 0060  
                 LCD8send@mode 002D                       sprintf@c 002F                       sprintf@f 002A  
        ??_displayAlphaNumeric 0032  customGraphics@selectedGraphic 002F  
