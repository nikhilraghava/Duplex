

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Aug  6 16:02:00 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F97J60 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	idataBANK0
    60  0003F0                     __pidataBANK0:
    61                           	opt stack 0
    62                           
    63                           ;initializer for LCD8init@F5867
    64  0003F0  0E                 	db	14
    65  0003F1  1D                 	db	29
    66  0003F2  1F                 	db	31
    67  0003F3  1C                 	db	28
    68  0003F4  18                 	db	24
    69  0003F5  1C                 	db	28
    70  0003F6  1F                 	db	31
    71  0003F7  0E                 	db	14
    72  0003F8  0E                 	db	14
    73  0003F9  1D                 	db	29
    74  0003FA  1F                 	db	31
    75  0003FB  1F                 	db	31
    76  0003FC  18                 	db	24
    77  0003FD  1F                 	db	31
    78  0003FE  1F                 	db	31
    79  0003FF  0E                 	db	14
    80  000400  0E                 	db	14
    81  000401  1F                 	db	31
    82  000402  15                 	db	21
    83  000403  1F                 	db	31
    84  000404  1F                 	db	31
    85  000405  1F                 	db	31
    86  000406  15                 	db	21
    87  000407  15                 	db	21
    88  0000                     _LATE	set	3981
    89  0000                     _LATHbits	set	3984
    90  0000                     _TRISH	set	3993
    91  0000                     _TRISE	set	3990
    92                           
    93                           ; #config settings
    94  0000                     
    95                           	psect	cinit
    96  000398                     __pcinit:
    97                           	opt stack 0
    98  000398                     start_initialization:
    99                           	opt stack 0
   100  000398                     __initialization:
   101                           	opt stack 0
   102                           
   103                           ; Initialize objects allocated to BANK0 (24 bytes)
   104                           ; load TBLPTR registers with __pidataBANK0
   105  000398  0EF0               	movlw	low __pidataBANK0
   106  00039A  6EF6               	movwf	tblptrl,c
   107  00039C  0E03               	movlw	high __pidataBANK0
   108  00039E  6EF7               	movwf	tblptrh,c
   109  0003A0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   110  0003A2  6EF8               	movwf	tblptru,c
   111  0003A4  EE00  F07A         	lfsr	0,__pdataBANK0
   112  0003A8  EE10 F018          	lfsr	1,24
   113  0003AC                     copy_data0:
   114  0003AC  0009               	tblrd		*+
   115  0003AE  CFF5 FFEE          	movff	tablat,postinc0
   116  0003B2  50E5               	movf	postdec1,w,c
   117  0003B4  50E1               	movf	fsr1l,w,c
   118  0003B6  E1FA               	bnz	copy_data0
   119                           
   120                           ; Clear objects allocated to COMRAM (2 bytes)
   121  0003B8  6A36               	clrf	(__pbssCOMRAM+1)& (0+255),c
   122  0003BA  6A35               	clrf	__pbssCOMRAM& (0+255),c
   123  0003BC                     end_of_initialization:
   124                           	opt stack 0
   125  0003BC                     __end_of__initialization:
   126                           	opt stack 0
   127  0003BC  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   128  0003BE  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   129  0003C0  0100               	movlb	0
   130  0003C2  EF70  F001         	goto	_main	;jump to C main() function
   131                           tblptru	equ	0xFF8
   132                           tblptrh	equ	0xFF7
   133                           tblptrl	equ	0xFF6
   134                           tablat	equ	0xFF5
   135                           postinc0	equ	0xFEE
   136                           postdec1	equ	0xFE5
   137                           fsr1l	equ	0xFE1
   138                           
   139                           	psect	bssCOMRAM
   140  000035                     __pbssCOMRAM:
   141                           	opt stack 0
   142  000035                     _cursorLocation:
   143                           	opt stack 0
   144  000035                     	ds	2
   145                           tblptru	equ	0xFF8
   146                           tblptrh	equ	0xFF7
   147                           tblptrl	equ	0xFF6
   148                           tablat	equ	0xFF5
   149                           postinc0	equ	0xFEE
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	dataBANK0
   154  00007A                     __pdataBANK0:
   155                           	opt stack 0
   156  00007A                     LCD8init@F5867:
   157                           	opt stack 0
   158  00007A                     	ds	24
   159                           tblptru	equ	0xFF8
   160                           tblptrh	equ	0xFF7
   161                           tblptrl	equ	0xFF6
   162                           tablat	equ	0xFF5
   163                           postinc0	equ	0xFEE
   164                           postdec1	equ	0xFE5
   165                           fsr1l	equ	0xFE1
   166                           
   167                           	psect	cstackBANK0
   168  000060                     __pcstackBANK0:
   169                           	opt stack 0
   170  000060                     LCD8init@customChar:
   171                           	opt stack 0
   172                           
   173                           ; 24 bytes @ 0x0
   174  000060                     	ds	24
   175  000078                     LCD8init@i:
   176                           	opt stack 0
   177                           
   178                           ; 2 bytes @ 0x18
   179  000078                     	ds	2
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           postdec1	equ	0xFE5
   186                           fsr1l	equ	0xFE1
   187                           
   188                           	psect	cstackCOMRAM
   189  000001                     __pcstackCOMRAM:
   190                           	opt stack 0
   191  000001                     ??_HighIsr:
   192  000001                     
   193                           ; 1 bytes @ 0x0
   194  000001                     	ds	18
   195  000013                     ??_LowIsr:
   196                           
   197                           ; 1 bytes @ 0x12
   198  000013                     	ds	21
   199  000028                     delay_ms@x:
   200                           	opt stack 0
   201  000028                     delay_us@x:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x27
   205  000028                     	ds	2
   206  00002A                     ??_delay_ms:
   207  00002A                     ??_delay_us:
   208                           
   209                           ; 1 bytes @ 0x29
   210  00002A                     	ds	1
   211  00002B                     delay_ms@i:
   212                           	opt stack 0
   213  00002B                     delay_us@i:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x2A
   217  00002B                     	ds	2
   218  00002D                     LCD8send@mode:
   219                           	opt stack 0
   220                           
   221                           ; 1 bytes @ 0x2C
   222  00002D                     	ds	1
   223  00002E                     LCD8send@c:
   224                           	opt stack 0
   225                           
   226                           ; 1 bytes @ 0x2D
   227  00002E                     	ds	1
   228  00002F                     PacMan@delay:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x2E
   232  00002F                     	ds	2
   233  000031                     PacMan@j:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x30
   237  000031                     	ds	2
   238  000033                     main@i:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x32
   242  000033                     	ds	2
   243                           tblptru	equ	0xFF8
   244                           tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           postinc0	equ	0xFEE
   248                           postdec1	equ	0xFE5
   249                           fsr1l	equ	0xFE1
   250                           
   251 ;;
   252 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   253 ;;
   254 ;; *************** function _main *****************
   255 ;; Defined at:
   256 ;;		line 48 in file "test.c"
   257 ;; Parameters:    Size  Location     Type
   258 ;;		None
   259 ;; Auto vars:     Size  Location     Type
   260 ;;  i               2   50[COMRAM] int 
   261 ;; Return value:  Size  Location     Type
   262 ;;                  1    wreg      void 
   263 ;; Registers used:
   264 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   265 ;; Tracked objects:
   266 ;;		On entry : 0/0
   267 ;;		On exit  : 0/0
   268 ;;		Unchanged: 0/0
   269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   274 ;;Total ram usage:        2 bytes
   275 ;; Hardware stack levels required when called:    5
   276 ;; This function calls:
   277 ;;		_LCD8init
   278 ;;		_LCD8send
   279 ;;		_PacMan
   280 ;; This function is called by:
   281 ;;		Startup code after reset
   282 ;; This function uses a non-reentrant model
   283 ;;
   284                           
   285                           	psect	text0
   286  0002E0                     __ptext0:
   287                           	opt stack 0
   288  0002E0                     _main:
   289                           	opt stack 26
   290                           
   291                           ;test.c: 50: LCD8init();
   292                           
   293                           ;incstack = 0
   294  0002E0  EC65  F000         	call	_LCD8init	;wreg free
   295                           
   296                           ;test.c: 51: LCD8send(0x0C, 0);
   297  0002E4  0E00               	movlw	0
   298  0002E6  6E2D               	movwf	LCD8send@mode,c
   299  0002E8  0E0C               	movlw	12
   300  0002EA  EC95  F001         	call	_LCD8send
   301                           
   302                           ;test.c: 52: LCD8send(0x80, 0);
   303  0002EE  0E00               	movlw	0
   304  0002F0  6E2D               	movwf	LCD8send@mode,c
   305  0002F2  0E80               	movlw	128
   306  0002F4  EC95  F001         	call	_LCD8send
   307                           
   308                           ;test.c: 53: for (int i = 0; i < 15; i++) {
   309  0002F8  0E00               	movlw	0
   310  0002FA  6E34               	movwf	main@i+1,c
   311  0002FC  0E00               	movlw	0
   312  0002FE  6E33               	movwf	main@i,c
   313  000300  BE34               	btfsc	main@i+1,7,c
   314  000302  D006               	goto	l96
   315  000304  5034               	movf	main@i+1,w,c
   316  000306  E110               	bnz	u260
   317  000308  0E0F               	movlw	15
   318  00030A  5C33               	subwf	main@i,w,c
   319  00030C  B0D8               	btfsc	status,0,c
   320  00030E  D00C               	goto	u260
   321  000310                     l96:
   322                           
   323                           ;test.c: 54: PacMan();
   324  000310  ECD7  F000         	call	_PacMan	;wreg free
   325  000314  4A33               	infsnz	main@i,f,c
   326  000316  2A34               	incf	main@i+1,f,c
   327  000318  BE34               	btfsc	main@i+1,7,c
   328  00031A  D7FA               	goto	l96
   329  00031C  5034               	movf	main@i+1,w,c
   330  00031E  E104               	bnz	u260
   331  000320  0E0F               	movlw	15
   332  000322  5C33               	subwf	main@i,w,c
   333  000324  A0D8               	btfss	status,0,c
   334  000326  D7F4               	goto	l96
   335  000328                     u260:
   336                           
   337                           ;test.c: 55: }
   338                           ;test.c: 56: while(1);
   339  000328  D7FF               	goto	u260
   340  00032A                     __end_of_main:
   341                           	opt stack 0
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           postdec1	equ	0xFE5
   348                           fsr1l	equ	0xFE1
   349                           status	equ	0xFD8
   350                           
   351 ;; *************** function _PacMan *****************
   352 ;; Defined at:
   353 ;;		line 28 in file "test.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;		None
   356 ;; Auto vars:     Size  Location     Type
   357 ;;  j               2   48[COMRAM] int 
   358 ;;  delay           2   46[COMRAM] int 
   359 ;; Return value:  Size  Location     Type
   360 ;;                  1    wreg      void 
   361 ;; Registers used:
   362 ;;		wreg, status,2, status,0, cstack
   363 ;; Tracked objects:
   364 ;;		On entry : 0/0
   365 ;;		On exit  : 0/0
   366 ;;		Unchanged: 0/0
   367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   369 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   371 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   372 ;;Total ram usage:        4 bytes
   373 ;; Hardware stack levels used:    1
   374 ;; Hardware stack levels required when called:    4
   375 ;; This function calls:
   376 ;;		_LCD8send
   377 ;;		_delay_ms
   378 ;; This function is called by:
   379 ;;		_main
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383                           	psect	text1
   384  0001AE                     __ptext1:
   385                           	opt stack 0
   386  0001AE                     _PacMan:
   387                           	opt stack 26
   388                           
   389                           ;test.c: 30: int delay = 150;
   390                           
   391                           ;incstack = 0
   392  0001AE  0E00               	movlw	0
   393  0001B0  6E30               	movwf	PacMan@delay+1,c
   394  0001B2  0E96               	movlw	150
   395  0001B4  6E2F               	movwf	PacMan@delay,c
   396                           
   397                           ;test.c: 31: for (int j = 0; j <16 ; j++) {
   398  0001B6  0E00               	movlw	0
   399  0001B8  6E32               	movwf	PacMan@j+1,c
   400  0001BA  0E00               	movlw	0
   401  0001BC  6E31               	movwf	PacMan@j,c
   402  0001BE                     l945:
   403  0001BE  BE32               	btfsc	PacMan@j+1,7,c
   404  0001C0  D006               	goto	l87
   405  0001C2  5032               	movf	PacMan@j+1,w,c
   406  0001C4  E142               	bnz	l91
   407  0001C6  0E10               	movlw	16
   408  0001C8  5C31               	subwf	PacMan@j,w,c
   409  0001CA  B0D8               	btfsc	status,0,c
   410  0001CC  0012               	return	
   411  0001CE                     l87:
   412                           
   413                           ;test.c: 32: if (j % 2 == 0) {
   414  0001CE  B031               	btfsc	PacMan@j,0,c
   415  0001D0  D01D               	goto	l89
   416                           
   417                           ;test.c: 33: LCD8send(0x80 + j, 0);
   418  0001D2  0E00               	movlw	0
   419  0001D4  6E2D               	movwf	LCD8send@mode,c
   420  0001D6  5031               	movf	PacMan@j,w,c
   421  0001D8  0F80               	addlw	128
   422  0001DA  EC95  F001         	call	_LCD8send
   423                           
   424                           ;test.c: 34: LCD8send(0x00, 1);
   425  0001DE  0E01               	movlw	1
   426  0001E0  6E2D               	movwf	LCD8send@mode,c
   427  0001E2  0E00               	movlw	0
   428  0001E4  EC95  F001         	call	_LCD8send
   429                           
   430                           ;test.c: 35: delay_ms(delay);
   431  0001E8  C02F  F028         	movff	PacMan@delay,delay_ms@x
   432  0001EC  C030  F029         	movff	PacMan@delay+1,delay_ms@x+1
   433  0001F0  ECB2  F001         	call	_delay_ms	;wreg free
   434                           
   435                           ;test.c: 36: LCD8send(0x01, 0);
   436  0001F4  0E00               	movlw	0
   437  0001F6  6E2D               	movwf	LCD8send@mode,c
   438  0001F8  0E01               	movlw	1
   439  0001FA  EC95  F001         	call	_LCD8send
   440                           
   441                           ;test.c: 37: delay_ms(delay);
   442  0001FE  C02F  F028         	movff	PacMan@delay,delay_ms@x
   443  000202  C030  F029         	movff	PacMan@delay+1,delay_ms@x+1
   444  000206  ECB2  F001         	call	_delay_ms	;wreg free
   445                           
   446                           ;test.c: 38: } else {
   447  00020A  D01C               	goto	l90
   448  00020C                     l89:
   449                           
   450                           ;test.c: 39: LCD8send(0x80 + j, 0);
   451  00020C  0E00               	movlw	0
   452  00020E  6E2D               	movwf	LCD8send@mode,c
   453  000210  5031               	movf	PacMan@j,w,c
   454  000212  0F80               	addlw	128
   455  000214  EC95  F001         	call	_LCD8send
   456                           
   457                           ;test.c: 40: LCD8send(0x01, 1);
   458  000218  0E01               	movlw	1
   459  00021A  6E2D               	movwf	LCD8send@mode,c
   460  00021C  0E01               	movlw	1
   461  00021E  EC95  F001         	call	_LCD8send
   462                           
   463                           ;test.c: 41: delay_ms(delay);
   464  000222  C02F  F028         	movff	PacMan@delay,delay_ms@x
   465  000226  C030  F029         	movff	PacMan@delay+1,delay_ms@x+1
   466  00022A  ECB2  F001         	call	_delay_ms	;wreg free
   467                           
   468                           ;test.c: 42: LCD8send(0x01, 0);
   469  00022E  0E00               	movlw	0
   470  000230  6E2D               	movwf	LCD8send@mode,c
   471  000232  0E01               	movlw	1
   472  000234  EC95  F001         	call	_LCD8send
   473                           
   474                           ;test.c: 43: delay_ms(delay);
   475  000238  C02F  F028         	movff	PacMan@delay,delay_ms@x
   476  00023C  C030  F029         	movff	PacMan@delay+1,delay_ms@x+1
   477  000240  ECB2  F001         	call	_delay_ms	;wreg free
   478  000244                     l90:
   479  000244  4A31               	infsnz	PacMan@j,f,c
   480  000246  2A32               	incf	PacMan@j+1,f,c
   481  000248  D7BA               	goto	l945
   482  00024A                     l91:
   483  00024A  0012               	return		;funcret
   484  00024C                     __end_of_PacMan:
   485                           	opt stack 0
   486                           tblptru	equ	0xFF8
   487                           tblptrh	equ	0xFF7
   488                           tblptrl	equ	0xFF6
   489                           tablat	equ	0xFF5
   490                           postinc0	equ	0xFEE
   491                           postdec1	equ	0xFE5
   492                           fsr1l	equ	0xFE1
   493                           status	equ	0xFD8
   494                           
   495 ;; *************** function _LCD8init *****************
   496 ;; Defined at:
   497 ;;		line 11 in file "LCD8.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;		None
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  i               2   24[BANK0 ] int 
   502 ;;  customChar     24    0[BANK0 ] unsigned char [24]
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : 0/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   513 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   515 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   516 ;;Total ram usage:       26 bytes
   517 ;; Hardware stack levels used:    1
   518 ;; Hardware stack levels required when called:    4
   519 ;; This function calls:
   520 ;;		_LCD8send
   521 ;;		_delay_ms
   522 ;;		_delay_us
   523 ;; This function is called by:
   524 ;;		_main
   525 ;;		_initLCDUI
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529                           	psect	text2
   530  0000CA                     __ptext2:
   531                           	opt stack 0
   532  0000CA                     _LCD8init:
   533                           	opt stack 26
   534                           
   535                           ;LCD8.c: 13: TRISE = 0x00;
   536                           
   537                           ;incstack = 0
   538  0000CA  0E00               	movlw	0
   539  0000CC  6E96               	movwf	3990,c	;volatile
   540                           
   541                           ;LCD8.c: 14: TRISH = 0b11111000;
   542  0000CE  0EF8               	movlw	248
   543  0000D0  6E99               	movwf	3993,c	;volatile
   544                           
   545                           ;LCD8.c: 15: LATHbits.LATH1 = 0;
   546  0000D2  9290               	bcf	3984,1,c	;volatile
   547                           
   548                           ;LCD8.c: 16: LATHbits.LATH0 = 0;
   549  0000D4  9090               	bcf	3984,0,c	;volatile
   550                           
   551                           ;LCD8.c: 17: LATHbits.LATH2 = 0;
   552  0000D6  9490               	bcf	3984,2,c	;volatile
   553                           
   554                           ;LCD8.c: 18: delay_ms(200);
   555  0000D8  0E00               	movlw	0
   556  0000DA  6E29               	movwf	delay_ms@x+1,c
   557  0000DC  0EC8               	movlw	200
   558  0000DE  6E28               	movwf	delay_ms@x,c
   559  0000E0  ECB2  F001         	call	_delay_ms	;wreg free
   560                           
   561                           ;LCD8.c: 20: LCD8send(0x30,0);
   562  0000E4  0E00               	movlw	0
   563  0000E6  6E2D               	movwf	LCD8send@mode,c
   564  0000E8  0E30               	movlw	48
   565  0000EA  EC95  F001         	call	_LCD8send
   566                           
   567                           ;LCD8.c: 21: LCD8send(0x30,0);
   568  0000EE  0E00               	movlw	0
   569  0000F0  6E2D               	movwf	LCD8send@mode,c
   570  0000F2  0E30               	movlw	48
   571  0000F4  EC95  F001         	call	_LCD8send
   572                           
   573                           ;LCD8.c: 22: LCD8send(0x30,0);
   574  0000F8  0E00               	movlw	0
   575  0000FA  6E2D               	movwf	LCD8send@mode,c
   576  0000FC  0E30               	movlw	48
   577  0000FE  EC95  F001         	call	_LCD8send
   578                           
   579                           ;LCD8.c: 23: LCD8send(0x38,0);
   580  000102  0E00               	movlw	0
   581  000104  6E2D               	movwf	LCD8send@mode,c
   582  000106  0E38               	movlw	56
   583  000108  EC95  F001         	call	_LCD8send
   584                           
   585                           ;LCD8.c: 24: LCD8send(0x10,0);
   586  00010C  0E00               	movlw	0
   587  00010E  6E2D               	movwf	LCD8send@mode,c
   588  000110  0E10               	movlw	16
   589  000112  EC95  F001         	call	_LCD8send
   590                           
   591                           ;LCD8.c: 25: LCD8send(0x0F,0);
   592  000116  0E00               	movlw	0
   593  000118  6E2D               	movwf	LCD8send@mode,c
   594  00011A  0E0F               	movlw	15
   595  00011C  EC95  F001         	call	_LCD8send
   596                           
   597                           ;LCD8.c: 26: LCD8send(0x06,0);
   598  000120  0E00               	movlw	0
   599  000122  6E2D               	movwf	LCD8send@mode,c
   600  000124  0E06               	movlw	6
   601  000126  EC95  F001         	call	_LCD8send
   602                           
   603                           ;LCD8.c: 28: char customChar[] = {
   604                           ;LCD8.c: 29: 0x0E,
   605                           ;LCD8.c: 30: 0x1D,
   606                           ;LCD8.c: 31: 0x1F,
   607                           ;LCD8.c: 32: 0x1C,
   608                           ;LCD8.c: 33: 0x18,
   609                           ;LCD8.c: 34: 0x1C,
   610                           ;LCD8.c: 35: 0x1F,
   611                           ;LCD8.c: 36: 0x0E,
   612                           ;LCD8.c: 37: 0x0E,
   613                           ;LCD8.c: 38: 0x1D,
   614                           ;LCD8.c: 39: 0x1F,
   615                           ;LCD8.c: 40: 0x1F,
   616                           ;LCD8.c: 41: 0x18,
   617                           ;LCD8.c: 42: 0x1F,
   618                           ;LCD8.c: 43: 0x1F,
   619                           ;LCD8.c: 44: 0x0E,
   620                           ;LCD8.c: 45: 0x0E,
   621                           ;LCD8.c: 46: 0x1F,
   622                           ;LCD8.c: 47: 0x15,
   623                           ;LCD8.c: 48: 0x1F,
   624                           ;LCD8.c: 49: 0x1F,
   625                           ;LCD8.c: 50: 0x1F,
   626                           ;LCD8.c: 51: 0x15,
   627                           ;LCD8.c: 52: 0x15
   628                           ;LCD8.c: 53: };
   629  00012A  EE20  F07A         	lfsr	2,LCD8init@F5867
   630  00012E  EE10  F060         	lfsr	1,LCD8init@customChar
   631  000132  0E17               	movlw	23
   632  000134                     u171:
   633  000134  CFDB FFE3          	movff	plusw2,plusw1
   634  000138  06E8               	decf	wreg,f,c
   635  00013A  E2FC               	bc	u171
   636                           
   637                           ;LCD8.c: 54: LCD8send(0x40, 0);
   638  00013C  0E00               	movlw	0
   639  00013E  6E2D               	movwf	LCD8send@mode,c
   640  000140  0E40               	movlw	64
   641  000142  EC95  F001         	call	_LCD8send
   642                           
   643                           ;LCD8.c: 55: delay_us(30);
   644  000146  0E00               	movlw	0
   645  000148  6E29               	movwf	delay_us@x+1,c
   646  00014A  0E1E               	movlw	30
   647  00014C  6E28               	movwf	delay_us@x,c
   648  00014E  ECE3  F001         	call	_delay_us	;wreg free
   649                           
   650                           ;LCD8.c: 56: for (int i = 0; i < 64; i++) {
   651  000152  0E00               	movlw	0
   652  000154  0100               	movlb	0	; () banked
   653  000156  6F79               	movwf	(LCD8init@i+1)& (0+255),b
   654  000158  0E00               	movlw	0
   655  00015A  6F78               	movwf	LCD8init@i& (0+255),b
   656  00015C                     l919:
   657                           
   658                           ; BSR set to: 0
   659  00015C  BF79               	btfsc	(LCD8init@i+1)& (0+255),7,b
   660  00015E  D006               	goto	l49
   661  000160  5179               	movf	(LCD8init@i+1)& (0+255),w,b
   662  000162  E119               	bnz	l931
   663  000164  0E40               	movlw	64
   664  000166  5D78               	subwf	LCD8init@i& (0+255),w,b
   665  000168  B0D8               	btfsc	status,0,c
   666  00016A  D015               	goto	u190
   667  00016C                     l49:
   668                           
   669                           ; BSR set to: 0
   670                           ;LCD8.c: 57: LCD8send(customChar[i], 1);
   671                           
   672                           ; BSR set to: 0
   673  00016C  0E01               	movlw	1
   674  00016E  6E2D               	movwf	LCD8send@mode,c
   675  000170  0E60               	movlw	low LCD8init@customChar
   676  000172  2578               	addwf	LCD8init@i& (0+255),w,b
   677  000174  6ED9               	movwf	fsr2l,c
   678  000176  0E00               	movlw	high LCD8init@customChar
   679  000178  2179               	addwfc	(LCD8init@i+1)& (0+255),w,b
   680  00017A  6EDA               	movwf	fsr2h,c
   681  00017C  50DF               	movf	indf2,w,c
   682  00017E  EC95  F001         	call	_LCD8send
   683                           
   684                           ;LCD8.c: 58: delay_us(30);
   685  000182  0E00               	movlw	0
   686  000184  6E29               	movwf	delay_us@x+1,c
   687  000186  0E1E               	movlw	30
   688  000188  6E28               	movwf	delay_us@x,c
   689  00018A  ECE3  F001         	call	_delay_us	;wreg free
   690  00018E  0100               	movlb	0	; () banked
   691  000190  4B78               	infsnz	LCD8init@i& (0+255),f,b
   692  000192  2B79               	incf	(LCD8init@i+1)& (0+255),f,b
   693  000194  D7E3               	goto	l919
   694  000196                     u190:
   695  000196                     l931:
   696                           
   697                           ; BSR set to: 0
   698                           ;LCD8.c: 59: }
   699                           ;LCD8.c: 61: LCD8send(0x01,0);
   700  000196  0E00               	movlw	0
   701  000198  6E2D               	movwf	LCD8send@mode,c
   702  00019A  0E01               	movlw	1
   703  00019C  EC95  F001         	call	_LCD8send
   704                           
   705                           ;LCD8.c: 62: delay_ms(100);
   706  0001A0  0E00               	movlw	0
   707  0001A2  6E29               	movwf	delay_ms@x+1,c
   708  0001A4  0E64               	movlw	100
   709  0001A6  6E28               	movwf	delay_ms@x,c
   710  0001A8  ECB2  F001         	call	_delay_ms	;wreg free
   711  0001AC  0012               	return		;funcret
   712  0001AE                     __end_of_LCD8init:
   713                           	opt stack 0
   714                           tblptru	equ	0xFF8
   715                           tblptrh	equ	0xFF7
   716                           tblptrl	equ	0xFF6
   717                           tablat	equ	0xFF5
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           postdec1	equ	0xFE5
   721                           plusw1	equ	0xFE3
   722                           fsr1l	equ	0xFE1
   723                           indf2	equ	0xFDF
   724                           plusw2	equ	0xFDB
   725                           fsr2h	equ	0xFDA
   726                           fsr2l	equ	0xFD9
   727                           status	equ	0xFD8
   728                           
   729 ;; *************** function _LCD8send *****************
   730 ;; Defined at:
   731 ;;		line 65 in file "LCD8.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  c               1    wreg     unsigned char 
   734 ;;  mode            1   44[COMRAM] unsigned char 
   735 ;; Auto vars:     Size  Location     Type
   736 ;;  c               1   45[COMRAM] unsigned char 
   737 ;; Return value:  Size  Location     Type
   738 ;;                  1    wreg      void 
   739 ;; Registers used:
   740 ;;		wreg, status,2, status,0, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   746 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   747 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;Total ram usage:        2 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; Hardware stack levels required when called:    3
   753 ;; This function calls:
   754 ;;		_delay_ms
   755 ;;		_delay_us
   756 ;; This function is called by:
   757 ;;		_LCD8init
   758 ;;		_PacMan
   759 ;;		_main
   760 ;;		_initLCDUI
   761 ;;		_clearDisplay
   762 ;;		_moveCursorTo
   763 ;;		_displayAlphaNumeric
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text3
   768  00032A                     __ptext3:
   769                           	opt stack 0
   770  00032A                     _LCD8send:
   771                           	opt stack 26
   772                           
   773                           ;incstack = 0
   774                           ;LCD8send@c stored from wreg
   775  00032A  6E2E               	movwf	LCD8send@c,c
   776                           
   777                           ;LCD8.c: 67: LATHbits.LATH2 = mode;
   778  00032C  B02D               	btfsc	LCD8send@mode,0,c
   779  00032E  D002               	bra	u165
   780  000330  9490               	bcf	3984,2,c	;volatile
   781  000332  D001               	bra	u166
   782  000334                     u165:
   783  000334  8490               	bsf	3984,2,c	;volatile
   784  000336                     u166:
   785                           
   786                           ;LCD8.c: 68: delay_ms(1);
   787  000336  0E00               	movlw	0
   788  000338  6E29               	movwf	delay_ms@x+1,c
   789  00033A  0E01               	movlw	1
   790  00033C  6E28               	movwf	delay_ms@x,c
   791  00033E  ECB2  F001         	call	_delay_ms	;wreg free
   792                           
   793                           ;LCD8.c: 70: LATE = c;
   794  000342  C02E  FF8D         	movff	LCD8send@c,3981	;volatile
   795                           
   796                           ;LCD8.c: 71: LATHbits.LATH0 = 1;
   797  000346  8090               	bsf	3984,0,c	;volatile
   798                           
   799                           ;LCD8.c: 72: delay_us(1);
   800  000348  0E00               	movlw	0
   801  00034A  6E29               	movwf	delay_us@x+1,c
   802  00034C  0E01               	movlw	1
   803  00034E  6E28               	movwf	delay_us@x,c
   804  000350  ECE3  F001         	call	_delay_us	;wreg free
   805                           
   806                           ;LCD8.c: 73: LATHbits.LATH0 = 0;
   807  000354  9090               	bcf	3984,0,c	;volatile
   808                           
   809                           ;LCD8.c: 74: delay_us(50);
   810  000356  0E00               	movlw	0
   811  000358  6E29               	movwf	delay_us@x+1,c
   812  00035A  0E32               	movlw	50
   813  00035C  6E28               	movwf	delay_us@x,c
   814  00035E  ECE3  F001         	call	_delay_us	;wreg free
   815  000362  0012               	return		;funcret
   816  000364                     __end_of_LCD8send:
   817                           	opt stack 0
   818                           tblptru	equ	0xFF8
   819                           tblptrh	equ	0xFF7
   820                           tblptrl	equ	0xFF6
   821                           tablat	equ	0xFF5
   822                           postinc0	equ	0xFEE
   823                           wreg	equ	0xFE8
   824                           postdec1	equ	0xFE5
   825                           plusw1	equ	0xFE3
   826                           fsr1l	equ	0xFE1
   827                           indf2	equ	0xFDF
   828                           plusw2	equ	0xFDB
   829                           fsr2h	equ	0xFDA
   830                           fsr2l	equ	0xFD9
   831                           status	equ	0xFD8
   832                           
   833 ;; *************** function _delay_us *****************
   834 ;; Defined at:
   835 ;;		line 15 in file "delay.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  x               2   39[COMRAM] int 
   838 ;; Auto vars:     Size  Location     Type
   839 ;;  i               2   42[COMRAM] int 
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, status,2, status,0
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   849 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   850 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   851 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   852 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   853 ;;Total ram usage:        5 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    2
   856 ;; This function calls:
   857 ;;		Nothing
   858 ;; This function is called by:
   859 ;;		_LCD8init
   860 ;;		_LCD8send
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text4
   865  0003C6                     __ptext4:
   866                           	opt stack 0
   867  0003C6                     _delay_us:
   868                           	opt stack 26
   869                           
   870                           ;delay.c: 17: for (int i = 0; i < x; i++)
   871                           
   872                           ;incstack = 0
   873  0003C6  0E00               	movlw	0
   874  0003C8  6E2C               	movwf	delay_us@i+1,c
   875  0003CA  0E00               	movlw	0
   876  0003CC  6E2B               	movwf	delay_us@i,c
   877  0003CE  D005               	goto	l65
   878  0003D0                     l66:
   879                           
   880                           ;delay.c: 18: {
   881                           ;delay.c: 19: _delay((unsigned long)((1)*(25000000/4000000.0)));
   882  0003D0  D000               	nop2		;2 cycle nop
   883  0003D2  D000               	nop2		;2 cycle nop
   884  0003D4  D000               	nop2		;2 cycle nop
   885  0003D6  4A2B               	infsnz	delay_us@i,f,c
   886  0003D8  2A2C               	incf	delay_us@i+1,f,c
   887  0003DA                     l65:
   888  0003DA  5028               	movf	delay_us@x,w,c
   889  0003DC  5C2B               	subwf	delay_us@i,w,c
   890  0003DE  502C               	movf	delay_us@i+1,w,c
   891  0003E0  0A80               	xorlw	128
   892  0003E2  6E2A               	movwf	??_delay_us& (0+255),c
   893  0003E4  5029               	movf	delay_us@x+1,w,c
   894  0003E6  0A80               	xorlw	128
   895  0003E8  582A               	subwfb	??_delay_us& (0+255),w,c
   896  0003EA  B0D8               	btfsc	status,0,c
   897  0003EC  0012               	return	
   898  0003EE  D7F0               	goto	l66
   899  0003F0                     __end_of_delay_us:
   900                           	opt stack 0
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postdec1	equ	0xFE5
   908                           plusw1	equ	0xFE3
   909                           fsr1l	equ	0xFE1
   910                           indf2	equ	0xFDF
   911                           plusw2	equ	0xFDB
   912                           fsr2h	equ	0xFDA
   913                           fsr2l	equ	0xFD9
   914                           status	equ	0xFD8
   915                           
   916 ;; *************** function _delay_ms *****************
   917 ;; Defined at:
   918 ;;		line 7 in file "delay.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  x               2   39[COMRAM] int 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  i               2   42[COMRAM] int 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, status,2, status,0
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   932 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   934 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   935 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   936 ;;Total ram usage:        5 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    2
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_LCD8init
   943 ;;		_LCD8send
   944 ;;		_PacMan
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           	psect	text5
   949  000364                     __ptext5:
   950                           	opt stack 0
   951  000364                     _delay_ms:
   952                           	opt stack 27
   953                           
   954                           ;delay.c: 9: for (int i = 0; i < x; i++)
   955                           
   956                           ;incstack = 0
   957  000364  0E00               	movlw	0
   958  000366  6E2C               	movwf	delay_ms@i+1,c
   959  000368  0E00               	movlw	0
   960  00036A  6E2B               	movwf	delay_ms@i,c
   961  00036C  D00A               	goto	l59
   962  00036E                     
   963                           ;delay.c: 10: {
   964                           ;delay.c: 11: _delay((unsigned long)((1)*(25000000/4000.0)));
   965  00036E  0E09               	movlw	9
   966  000370  6E2A               	movwf	??_delay_ms& (0+255),c
   967  000372  0E1C               	movlw	28
   968  000374                     u277:
   969  000374  2EE8               	decfsz	wreg,f,c
   970  000376  D7FE               	bra	u277
   971  000378  2E2A               	decfsz	??_delay_ms& (0+255),f,c
   972  00037A  D7FC               	bra	u277
   973  00037C  D000               	nop2	
   974  00037E  4A2B               	infsnz	delay_ms@i,f,c
   975  000380  2A2C               	incf	delay_ms@i+1,f,c
   976  000382                     l59:
   977  000382  5028               	movf	delay_ms@x,w,c
   978  000384  5C2B               	subwf	delay_ms@i,w,c
   979  000386  502C               	movf	delay_ms@i+1,w,c
   980  000388  0A80               	xorlw	128
   981  00038A  6E2A               	movwf	??_delay_ms& (0+255),c
   982  00038C  5029               	movf	delay_ms@x+1,w,c
   983  00038E  0A80               	xorlw	128
   984  000390  582A               	subwfb	??_delay_ms& (0+255),w,c
   985  000392  B0D8               	btfsc	status,0,c
   986  000394  0012               	return	
   987  000396  D7EB               	goto	l60
   988  000398                     __end_of_delay_ms:
   989                           	opt stack 0
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postdec1	equ	0xFE5
   997                           plusw1	equ	0xFE3
   998                           fsr1l	equ	0xFE1
   999                           indf2	equ	0xFDF
  1000                           plusw2	equ	0xFDB
  1001                           fsr2h	equ	0xFDA
  1002                           fsr2l	equ	0xFD9
  1003                           status	equ	0xFD8
  1004                           
  1005 ;; *************** function _LowIsr *****************
  1006 ;; Defined at:
  1007 ;;		line 23 in file "test.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;		None
  1010 ;; Auto vars:     Size  Location     Type
  1011 ;;		None
  1012 ;; Return value:  Size  Location     Type
  1013 ;;                  1    wreg      void 
  1014 ;; Registers used:
  1015 ;;		None
  1016 ;; Tracked objects:
  1017 ;;		On entry : 0/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1023 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1024 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;Total ram usage:       21 bytes
  1026 ;; Hardware stack levels used:    1
  1027 ;; Hardware stack levels required when called:    1
  1028 ;; This function calls:
  1029 ;;		Nothing
  1030 ;; This function is called by:
  1031 ;;		Interrupt level 1
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	intcodelo
  1036  000018                     __pintcodelo:
  1037                           	opt stack 0
  1038  000018                     _LowIsr:
  1039                           	opt stack 26
  1040                           
  1041                           ;incstack = 0
  1042  000018  8037               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1043  00001A  CFD8 F013          	movff	status,??_LowIsr
  1044  00001E  CFE8 F014          	movff	wreg,??_LowIsr+1
  1045  000022  CFE0 F015          	movff	bsr,??_LowIsr+2
  1046  000026  CFFA F016          	movff	pclath,??_LowIsr+3
  1047  00002A  CFFB F017          	movff	pclatu,??_LowIsr+4
  1048  00002E  CFE9 F018          	movff	fsr0l,??_LowIsr+5
  1049  000032  CFEA F019          	movff	fsr0h,??_LowIsr+6
  1050  000036  CFE1 F01A          	movff	fsr1l,??_LowIsr+7
  1051  00003A  CFE2 F01B          	movff	fsr1h,??_LowIsr+8
  1052  00003E  CFD9 F01C          	movff	fsr2l,??_LowIsr+9
  1053  000042  CFDA F01D          	movff	fsr2h,??_LowIsr+10
  1054  000046  CFF3 F01E          	movff	prodl,??_LowIsr+11
  1055  00004A  CFF4 F01F          	movff	prodh,??_LowIsr+12
  1056  00004E  CFF6 F020          	movff	tblptrl,??_LowIsr+13
  1057  000052  CFF7 F021          	movff	tblptrh,??_LowIsr+14
  1058  000056  CFF8 F022          	movff	tblptru,??_LowIsr+15
  1059  00005A  CFF5 F023          	movff	tablat,??_LowIsr+16
  1060  00005E  C037  F024         	movff	btemp,??_LowIsr+17
  1061  000062  C038  F025         	movff	btemp+1,??_LowIsr+18
  1062  000066  C039  F026         	movff	btemp+2,??_LowIsr+19
  1063  00006A  C03A  F027         	movff	btemp+3,??_LowIsr+20
  1064  00006E  C027  F03A         	movff	??_LowIsr+20,btemp+3
  1065  000072  C026  F039         	movff	??_LowIsr+19,btemp+2
  1066  000076  C025  F038         	movff	??_LowIsr+18,btemp+1
  1067  00007A  C024  F037         	movff	??_LowIsr+17,btemp
  1068  00007E  C023  FFF5         	movff	??_LowIsr+16,tablat
  1069  000082  C022  FFF8         	movff	??_LowIsr+15,tblptru
  1070  000086  C021  FFF7         	movff	??_LowIsr+14,tblptrh
  1071  00008A  C020  FFF6         	movff	??_LowIsr+13,tblptrl
  1072  00008E  C01F  FFF4         	movff	??_LowIsr+12,prodh
  1073  000092  C01E  FFF3         	movff	??_LowIsr+11,prodl
  1074  000096  C01D  FFDA         	movff	??_LowIsr+10,fsr2h
  1075  00009A  C01C  FFD9         	movff	??_LowIsr+9,fsr2l
  1076  00009E  C01B  FFE2         	movff	??_LowIsr+8,fsr1h
  1077  0000A2  C01A  FFE1         	movff	??_LowIsr+7,fsr1l
  1078  0000A6  C019  FFEA         	movff	??_LowIsr+6,fsr0h
  1079  0000AA  C018  FFE9         	movff	??_LowIsr+5,fsr0l
  1080  0000AE  C017  FFFB         	movff	??_LowIsr+4,pclatu
  1081  0000B2  C016  FFFA         	movff	??_LowIsr+3,pclath
  1082  0000B6  C015  FFE0         	movff	??_LowIsr+2,bsr
  1083  0000BA  C014  FFE8         	movff	??_LowIsr+1,wreg
  1084  0000BE  C013  FFD8         	movff	??_LowIsr,status
  1085  0000C2  9037               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1086  0000C4  0010               	retfie	
  1087  0000C6                     __end_of_LowIsr:
  1088                           	opt stack 0
  1089                           pclatu	equ	0xFFB
  1090                           pclath	equ	0xFFA
  1091                           tblptru	equ	0xFF8
  1092                           tblptrh	equ	0xFF7
  1093                           tblptrl	equ	0xFF6
  1094                           tablat	equ	0xFF5
  1095                           prodh	equ	0xFF4
  1096                           prodl	equ	0xFF3
  1097                           postinc0	equ	0xFEE
  1098                           fsr0h	equ	0xFEA
  1099                           fsr0l	equ	0xFE9
  1100                           wreg	equ	0xFE8
  1101                           postdec1	equ	0xFE5
  1102                           plusw1	equ	0xFE3
  1103                           fsr1h	equ	0xFE2
  1104                           fsr1l	equ	0xFE1
  1105                           bsr	equ	0xFE0
  1106                           indf2	equ	0xFDF
  1107                           plusw2	equ	0xFDB
  1108                           fsr2h	equ	0xFDA
  1109                           fsr2l	equ	0xFD9
  1110                           status	equ	0xFD8
  1111                           
  1112 ;; *************** function _HighIsr *****************
  1113 ;; Defined at:
  1114 ;;		line 18 in file "test.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;		None
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		None
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1130 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1131 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;Total ram usage:       18 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; This function calls:
  1135 ;;		Nothing
  1136 ;; This function is called by:
  1137 ;;		Interrupt level 2
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141                           	psect	intcode
  1142  000008                     __pintcode:
  1143                           	opt stack 0
  1144  000008                     _HighIsr:
  1145                           	opt stack 26
  1146                           
  1147                           ;incstack = 0
  1148  000008  8237               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1149  00000A  EF26  F001         	goto	int_func
  1150                           pclatu	equ	0xFFB
  1151                           pclath	equ	0xFFA
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           prodh	equ	0xFF4
  1157                           prodl	equ	0xFF3
  1158                           postinc0	equ	0xFEE
  1159                           fsr0h	equ	0xFEA
  1160                           fsr0l	equ	0xFE9
  1161                           wreg	equ	0xFE8
  1162                           postdec1	equ	0xFE5
  1163                           plusw1	equ	0xFE3
  1164                           fsr1h	equ	0xFE2
  1165                           fsr1l	equ	0xFE1
  1166                           bsr	equ	0xFE0
  1167                           indf2	equ	0xFDF
  1168                           plusw2	equ	0xFDB
  1169                           fsr2h	equ	0xFDA
  1170                           fsr2l	equ	0xFD9
  1171                           status	equ	0xFD8
  1172                           
  1173                           	psect	intcode_body
  1174  00024C                     __pintcode_body:
  1175                           	opt stack 26
  1176  00024C                     int_func:
  1177                           	opt stack 26
  1178  00024C  CFFA F001          	movff	pclath,??_HighIsr
  1179  000250  CFFB F002          	movff	pclatu,??_HighIsr+1
  1180  000254  CFE9 F003          	movff	fsr0l,??_HighIsr+2
  1181  000258  CFEA F004          	movff	fsr0h,??_HighIsr+3
  1182  00025C  CFE1 F005          	movff	fsr1l,??_HighIsr+4
  1183  000260  CFE2 F006          	movff	fsr1h,??_HighIsr+5
  1184  000264  CFD9 F007          	movff	fsr2l,??_HighIsr+6
  1185  000268  CFDA F008          	movff	fsr2h,??_HighIsr+7
  1186  00026C  CFF3 F009          	movff	prodl,??_HighIsr+8
  1187  000270  CFF4 F00A          	movff	prodh,??_HighIsr+9
  1188  000274  CFF6 F00B          	movff	tblptrl,??_HighIsr+10
  1189  000278  CFF7 F00C          	movff	tblptrh,??_HighIsr+11
  1190  00027C  CFF8 F00D          	movff	tblptru,??_HighIsr+12
  1191  000280  CFF5 F00E          	movff	tablat,??_HighIsr+13
  1192  000284  C037  F00F         	movff	btemp,??_HighIsr+14
  1193  000288  C038  F010         	movff	btemp+1,??_HighIsr+15
  1194  00028C  C039  F011         	movff	btemp+2,??_HighIsr+16
  1195  000290  C03A  F012         	movff	btemp+3,??_HighIsr+17
  1196  000294  C012  F03A         	movff	??_HighIsr+17,btemp+3
  1197  000298  C011  F039         	movff	??_HighIsr+16,btemp+2
  1198  00029C  C010  F038         	movff	??_HighIsr+15,btemp+1
  1199  0002A0  C00F  F037         	movff	??_HighIsr+14,btemp
  1200  0002A4  C00E  FFF5         	movff	??_HighIsr+13,tablat
  1201  0002A8  C00D  FFF8         	movff	??_HighIsr+12,tblptru
  1202  0002AC  C00C  FFF7         	movff	??_HighIsr+11,tblptrh
  1203  0002B0  C00B  FFF6         	movff	??_HighIsr+10,tblptrl
  1204  0002B4  C00A  FFF4         	movff	??_HighIsr+9,prodh
  1205  0002B8  C009  FFF3         	movff	??_HighIsr+8,prodl
  1206  0002BC  C008  FFDA         	movff	??_HighIsr+7,fsr2h
  1207  0002C0  C007  FFD9         	movff	??_HighIsr+6,fsr2l
  1208  0002C4  C006  FFE2         	movff	??_HighIsr+5,fsr1h
  1209  0002C8  C005  FFE1         	movff	??_HighIsr+4,fsr1l
  1210  0002CC  C004  FFEA         	movff	??_HighIsr+3,fsr0h
  1211  0002D0  C003  FFE9         	movff	??_HighIsr+2,fsr0l
  1212  0002D4  C002  FFFB         	movff	??_HighIsr+1,pclatu
  1213  0002D8  C001  FFFA         	movff	??_HighIsr,pclath
  1214  0002DC  9237               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1215  0002DE  0011               	retfie		f
  1216  0002E0                     __end_of_HighIsr:
  1217                           	opt stack 0
  1218  0000                     pclatu	equ	0xFFB
  1219                           pclath	equ	0xFFA
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           prodh	equ	0xFF4
  1225                           prodl	equ	0xFF3
  1226                           postinc0	equ	0xFEE
  1227                           fsr0h	equ	0xFEA
  1228                           fsr0l	equ	0xFE9
  1229                           wreg	equ	0xFE8
  1230                           postdec1	equ	0xFE5
  1231                           plusw1	equ	0xFE3
  1232                           fsr1h	equ	0xFE2
  1233                           fsr1l	equ	0xFE1
  1234                           bsr	equ	0xFE0
  1235                           indf2	equ	0xFDF
  1236                           plusw2	equ	0xFDB
  1237                           fsr2h	equ	0xFDA
  1238                           fsr2l	equ	0xFD9
  1239                           status	equ	0xFD8
  1240                           pclatu	equ	0xFFB
  1241                           pclath	equ	0xFFA
  1242                           tblptru	equ	0xFF8
  1243                           tblptrh	equ	0xFF7
  1244                           tblptrl	equ	0xFF6
  1245                           tablat	equ	0xFF5
  1246                           prodh	equ	0xFF4
  1247                           prodl	equ	0xFF3
  1248                           postinc0	equ	0xFEE
  1249                           fsr0h	equ	0xFEA
  1250                           fsr0l	equ	0xFE9
  1251                           wreg	equ	0xFE8
  1252                           postdec1	equ	0xFE5
  1253                           plusw1	equ	0xFE3
  1254                           fsr1h	equ	0xFE2
  1255                           fsr1l	equ	0xFE1
  1256                           bsr	equ	0xFE0
  1257                           indf2	equ	0xFDF
  1258                           plusw2	equ	0xFDB
  1259                           fsr2h	equ	0xFDA
  1260                           fsr2l	equ	0xFD9
  1261                           status	equ	0xFD8
  1262                           
  1263                           	psect	rparam
  1264  0000                     pclatu	equ	0xFFB
  1265                           pclath	equ	0xFFA
  1266                           tblptru	equ	0xFF8
  1267                           tblptrh	equ	0xFF7
  1268                           tblptrl	equ	0xFF6
  1269                           tablat	equ	0xFF5
  1270                           prodh	equ	0xFF4
  1271                           prodl	equ	0xFF3
  1272                           postinc0	equ	0xFEE
  1273                           fsr0h	equ	0xFEA
  1274                           fsr0l	equ	0xFE9
  1275                           wreg	equ	0xFE8
  1276                           postdec1	equ	0xFE5
  1277                           plusw1	equ	0xFE3
  1278                           fsr1h	equ	0xFE2
  1279                           fsr1l	equ	0xFE1
  1280                           bsr	equ	0xFE0
  1281                           indf2	equ	0xFDF
  1282                           plusw2	equ	0xFDB
  1283                           fsr2h	equ	0xFDA
  1284                           fsr2l	equ	0xFD9
  1285                           status	equ	0xFD8
  1286                           
  1287                           	psect	temp
  1288  000037                     btemp:
  1289                           	opt stack 0
  1290  000037                     	ds	1
  1291  0000                     int$flags	set	btemp
  1292  0000                     wtemp6	set	btemp+1
  1293                           pclatu	equ	0xFFB
  1294                           pclath	equ	0xFFA
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           prodh	equ	0xFF4
  1300                           prodl	equ	0xFF3
  1301                           postinc0	equ	0xFEE
  1302                           fsr0h	equ	0xFEA
  1303                           fsr0l	equ	0xFE9
  1304                           wreg	equ	0xFE8
  1305                           postdec1	equ	0xFE5
  1306                           plusw1	equ	0xFE3
  1307                           fsr1h	equ	0xFE2
  1308                           fsr1l	equ	0xFE1
  1309                           bsr	equ	0xFE0
  1310                           indf2	equ	0xFDF
  1311                           plusw2	equ	0xFDB
  1312                           fsr2h	equ	0xFDA
  1313                           fsr2l	equ	0xFD9
  1314                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      54
    BANK0           160     26      50
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_PacMan
    _PacMan->_LCD8send
    _LCD8init->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in COMRAM

    None.

Critical Paths under _HighIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_LCD8init

Critical Paths under _LowIsr in BANK0

    None.

Critical Paths under _HighIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowIsr in BANK1

    None.

Critical Paths under _HighIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowIsr in BANK2

    None.

Critical Paths under _HighIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowIsr in BANK3

    None.

Critical Paths under _HighIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowIsr in BANK4

    None.

Critical Paths under _HighIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowIsr in BANK5

    None.

Critical Paths under _HighIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowIsr in BANK6

    None.

Critical Paths under _HighIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowIsr in BANK7

    None.

Critical Paths under _HighIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowIsr in BANK8

    None.

Critical Paths under _HighIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowIsr in BANK9

    None.

Critical Paths under _HighIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowIsr in BANK10

    None.

Critical Paths under _HighIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowIsr in BANK11

    None.

Critical Paths under _HighIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowIsr in BANK12

    None.

Critical Paths under _HighIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowIsr in BANK13

    None.

Critical Paths under _HighIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _LowIsr in BANK14

    None.

Critical Paths under _HighIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _LowIsr in BANK15

    None.

Critical Paths under _HighIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10005
                                             50 COMRAM     2     2      0
                           _LCD8init
                           _LCD8send
                             _PacMan
 ---------------------------------------------------------------------------------
 (1) _PacMan                                               4     4      0    3499
                                             46 COMRAM     4     4      0
                           _LCD8send
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _LCD8init                                            26    26      0    3740
                                              0 BANK0     26    26      0
                           _LCD8send
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _LCD8send                                             2     1      1    2720
                                             44 COMRAM     2     1      1
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     3      2     350
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     578
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _LowIsr                                              21    21      0       0
                                             18 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _HighIsr                                             18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD8init
     _LCD8send
       _delay_ms
       _delay_us
     _delay_ms
     _delay_us
   _LCD8send
     _delay_ms
     _delay_us
   _PacMan
     _LCD8send
       _delay_ms
       _delay_us
     _delay_ms

 _LowIsr (ROOT)

 _HighIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0       0      38        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1A      32       5       31.2%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      36       1       57.4%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      68      29        0.0%
DATA                 0      0      68       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Aug  6 16:02:00 2018

                     l60 036E                       l65 03DA                       l49 016C  
                     l66 03D0                       l90 0244                       l59 0382  
                     l91 024A                       l87 01CE                       l96 0310  
                     l89 020C                       bsr 000FE0                      l931 0196  
                    l919 015C                      l945 01BE                      u171 0134  
                    u260 0328                      u165 0334                      u166 0336  
                    u190 0196                      u277 0374                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_WDT$OFF 000000                     _LATE 000F8D  
                   _main 02E0                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0037  
                   prodh 000FF4                     prodl 000FF3                     start 00C6  
        __end_of_HighIsr 02E0             ___param_bank 000000         __end_of_LCD8init 01AE  
       __end_of_LCD8send 0364                    ?_main 0001                    _TRISE 000F96  
                  _TRISH 000F99                    main@i 0033                    pclath 000FFA  
                  tablat 000FF5                    plusw1 000FE3                    plusw2 000FDB  
                  status 000FD8                    wtemp6 0038          __initialization 0398  
           __end_of_main 032A                   ??_main 0033            __activetblptr 000000  
              ??_HighIsr 0001         __end_of_delay_ms 0398         __end_of_delay_us 03F0  
                 _PacMan 01AE           __CFG_XINST$OFF 000000                   _LowIsr 0018  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              LCD8init@i 0078                LCD8send@c 002E                ?_LCD8init 0001  
              ?_LCD8send 002D               __accesstop 0060  __end_of__initialization 03BC  
          ___rparam_used 000001           __pcstackCOMRAM 0001             __pidataBANK0 03F0  
             ??_LCD8init 002F               ??_LCD8send 002E                  ?_PacMan 0001  
                ?_LowIsr 0001                ?_delay_ms 0028                ?_delay_us 0028  
                PacMan@j 0031                  _HighIsr 0008          __size_of_PacMan 009E  
                __Hparam 0000                  __Lparam 0000          __size_of_LowIsr 00AE  
                __pcinit 0398                  __ramtop 1000                  __ptext0 02E0  
                __ptext1 01AE                  __ptext2 00CA                  __ptext3 032A  
                __ptext4 03C6                  __ptext5 0364               ??_delay_ms 002A  
             ??_delay_us 002A           __pintcode_body 024C     end_of_initialization 03BC  
                int_func 024C                  postdec1 000FE5                  postinc0 000FEE  
      __size_of_LCD8init 00E4        __size_of_LCD8send 003A           __end_of_PacMan 024C  
         __end_of_LowIsr 00C6      start_initialization 0398                 ??_PacMan 002F  
               ??_LowIsr 0013              __pdataBANK0 007A              __pbssCOMRAM 0035  
          __pcstackBANK0 0060        __size_of_delay_ms 0034        __size_of_delay_us 002A  
               ?_HighIsr 0001                __pintcode 0008           _cursorLocation 0035  
            __pintcodelo 0018                 _LCD8init 00CA                 _LCD8send 032A  
              delay_ms@i 002B                delay_ms@x 0028                 _LATHbits 000F90  
              delay_us@i 002B                delay_us@x 0028                copy_data0 03AC  
     LCD8init@customChar 0060         __size_of_HighIsr 02D8                 __Hrparam 0000  
               __Lrparam 0000                 _delay_ms 0364                 _delay_us 03C6  
          LCD8init@F5867 007A            __size_of_main 004A                 int$flags 0037  
               intlevel1 0000                 intlevel2 0000              PacMan@delay 002F  
           LCD8send@mode 002D  
