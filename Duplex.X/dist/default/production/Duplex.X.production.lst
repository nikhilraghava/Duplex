

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Aug 13 16:44:20 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F97J60 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataBANK0
    67  0013F2                     __pidataBANK0:
    68                           	opt stack 0
    69                           
    70                           ;initializer for LCD8init@F5867
    71  0013F2  1F                 	db	31
    72  0013F3  1F                 	db	31
    73  0013F4  00                 	db	0
    74  0013F5  09                 	db	9
    75  0013F6  00                 	db	0
    76  0013F7  04                 	db	4
    77  0013F8  00                 	db	0
    78  0013F9  11                 	db	17
    79  0013FA  1F                 	db	31
    80  0013FB  1F                 	db	31
    81  0013FC  00                 	db	0
    82  0013FD  15                 	db	21
    83  0013FE  11                 	db	17
    84  0013FF  05                 	db	5
    85  001400  14                 	db	20
    86  001401  15                 	db	21
    87  001402  12                 	db	18
    88  001403  09                 	db	9
    89  001404  12                 	db	18
    90  001405  09                 	db	9
    91  001406  00                 	db	0
    92  001407  1F                 	db	31
    93  001408  00                 	db	0
    94  001409  1F                 	db	31
    95  00140A  0E                 	db	14
    96  00140B  08                 	db	8
    97  00140C  02                 	db	2
    98  00140D  0E                 	db	14
    99  00140E  00                 	db	0
   100  00140F  1F                 	db	31
   101  001410  00                 	db	0
   102  001411  1F                 	db	31
   103  0000                     _LATE	set	3981
   104  0000                     _LATHbits	set	3984
   105  0000                     _TRISH	set	3993
   106  0000                     _TRISE	set	3990
   107                           
   108                           	psect	smallconst
   109  001000                     __psmallconst:
   110                           	opt stack 0
   111  001000  00                 	db	0
   112  001001                     STR_1:
   113  001001  48                 	db	72	;'H'
   114  001002  65                 	db	101	;'e'
   115  001003  6C                 	db	108	;'l'
   116  001004  6C                 	db	108	;'l'
   117  001005  6F                 	db	111	;'o'
   118  001006  21                 	db	33
   119  001007  00                 	db	0
   120  001008                     STR_2:
   121  001008  42                 	db	66	;'B'
   122  001009  79                 	db	121	;'y'
   123  00100A  65                 	db	101	;'e'
   124  00100B  21                 	db	33
   125  00100C  00                 	db	0
   126                           
   127                           ; #config settings
   128  00100D  00                 	db	0	; dummy byte at the end
   129  0000                     
   130                           	psect	cinit
   131  001374                     __pcinit:
   132                           	opt stack 0
   133  001374                     start_initialization:
   134                           	opt stack 0
   135  001374                     __initialization:
   136                           	opt stack 0
   137                           
   138                           ; Initialize objects allocated to BANK0 (32 bytes)
   139                           ; load TBLPTR registers with __pidataBANK0
   140  001374  0EF2               	movlw	low __pidataBANK0
   141  001376  6EF6               	movwf	tblptrl,c
   142  001378  0E13               	movlw	high __pidataBANK0
   143  00137A  6EF7               	movwf	tblptrh,c
   144  00137C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   145  00137E  6EF8               	movwf	tblptru,c
   146  001380  EE00  F082         	lfsr	0,__pdataBANK0
   147  001384  EE10 F020          	lfsr	1,32
   148  001388                     copy_data0:
   149  001388  0009               	tblrd		*+
   150  00138A  CFF5 FFEE          	movff	tablat,postinc0
   151  00138E  50E5               	movf	postdec1,w,c
   152  001390  50E1               	movf	fsr1l,w,c
   153  001392  E1FA               	bnz	copy_data0
   154                           
   155                           ; Clear objects allocated to COMRAM (2 bytes)
   156  001394  6A36               	clrf	(__pbssCOMRAM+1)& (0+255),c
   157  001396  6A35               	clrf	__pbssCOMRAM& (0+255),c
   158  001398                     end_of_initialization:
   159                           	opt stack 0
   160  001398                     __end_of__initialization:
   161                           	opt stack 0
   162  001398  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   163  00139A  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   164  00139C  0100               	movlb	0
   165  00139E  EF79  F008         	goto	_main	;jump to C main() function
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           postinc0	equ	0xFEE
   171                           postdec1	equ	0xFE5
   172                           fsr1l	equ	0xFE1
   173                           
   174                           	psect	bssCOMRAM
   175  000035                     __pbssCOMRAM:
   176                           	opt stack 0
   177  000035                     _cursorLocation:
   178                           	opt stack 0
   179  000035                     	ds	2
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           postdec1	equ	0xFE5
   186                           fsr1l	equ	0xFE1
   187                           
   188                           	psect	dataBANK0
   189  000082                     __pdataBANK0:
   190                           	opt stack 0
   191  000082                     LCD8init@F5867:
   192                           	opt stack 0
   193  000082                     	ds	32
   194                           tblptru	equ	0xFF8
   195                           tblptrh	equ	0xFF7
   196                           tblptrl	equ	0xFF6
   197                           tablat	equ	0xFF5
   198                           postinc0	equ	0xFEE
   199                           postdec1	equ	0xFE5
   200                           fsr1l	equ	0xFE1
   201                           
   202                           	psect	cstackBANK0
   203  000060                     __pcstackBANK0:
   204                           	opt stack 0
   205  000060                     clearDisplayAndCursorTo@row:
   206                           	opt stack 0
   207  000060                     displayAlphaNumeric@buffer:
   208                           	opt stack 0
   209  000060                     LCD8init@customChar:
   210                           	opt stack 0
   211                           
   212                           ; 32 bytes @ 0x0
   213  000060                     	ds	2
   214  000062                     clearDisplayAndCursorTo@col:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x2
   218  000062                     	ds	14
   219  000070                     displayAlphaNumeric@i:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x10
   223  000070                     	ds	16
   224  000080                     LCD8init@i:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x20
   228  000080                     	ds	2
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           postdec1	equ	0xFE5
   235                           fsr1l	equ	0xFE1
   236                           
   237                           	psect	cstackCOMRAM
   238  000001                     __pcstackCOMRAM:
   239                           	opt stack 0
   240  000001                     ??_HighIsr:
   241  000001                     
   242                           ; 1 bytes @ 0x0
   243  000001                     	ds	18
   244  000013                     ??_LowIsr:
   245                           
   246                           ; 1 bytes @ 0x12
   247  000013                     	ds	21
   248  000028                     ?_sprintf:
   249                           	opt stack 0
   250  000028                     delay_ms@x:
   251                           	opt stack 0
   252  000028                     delay_us@x:
   253                           	opt stack 0
   254  000028                     sprintf@sp:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x27
   258  000028                     	ds	2
   259  00002A                     ??_delay_ms:
   260  00002A                     ??_delay_us:
   261  00002A                     sprintf@f:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x29
   265  00002A                     	ds	1
   266  00002B                     delay_ms@i:
   267                           	opt stack 0
   268  00002B                     delay_us@i:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x2A
   272  00002B                     	ds	1
   273  00002C                     sprintf@ap:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x2B
   277  00002C                     	ds	1
   278  00002D                     LCD8send@mode:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x2C
   282  00002D                     	ds	1
   283  00002E                     LCD8send@c:
   284                           	opt stack 0
   285  00002E                     sprintf@flag:
   286                           	opt stack 0
   287                           
   288                           ; 1 bytes @ 0x2D
   289  00002E                     	ds	1
   290  00002F                     sprintf@c:
   291                           	opt stack 0
   292  00002F                     moveCursorTo@row:
   293                           	opt stack 0
   294  00002F                     customGraphics@selectedGraphic:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x2E
   298  00002F                     	ds	1
   299  000030                     displayAlphaNumeric@message:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x2F
   303  000030                     	ds	1
   304  000031                     moveCursorTo@col:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x30
   308  000031                     	ds	1
   309  000032                     
   310                           ; 1 bytes @ 0x31
   311  000032                     	ds	1
   312  000033                     main@i:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x32
   316  000033                     	ds	2
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           postdec1	equ	0xFE5
   323                           fsr1l	equ	0xFE1
   324                           
   325 ;;
   326 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   327 ;;
   328 ;; *************** function _main *****************
   329 ;; Defined at:
   330 ;;		line 27 in file "test.c"
   331 ;; Parameters:    Size  Location     Type
   332 ;;		None
   333 ;; Auto vars:     Size  Location     Type
   334 ;;  i               2   50[COMRAM] int 
   335 ;; Return value:  Size  Location     Type
   336 ;;                  1    wreg      void 
   337 ;; Registers used:
   338 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   339 ;; Tracked objects:
   340 ;;		On entry : 0/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   345 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   347 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   348 ;;Total ram usage:        2 bytes
   349 ;; Hardware stack levels required when called:    6
   350 ;; This function calls:
   351 ;;		_clearDisplay
   352 ;;		_clearDisplayAndCursorTo
   353 ;;		_customGraphics
   354 ;;		_delay_ms
   355 ;;		_displayAlphaNumeric
   356 ;;		_initLCDUI
   357 ;;		_moveCursorTo
   358 ;; This function is called by:
   359 ;;		Startup code after reset
   360 ;; This function uses a non-reentrant model
   361 ;;
   362                           
   363                           	psect	text0
   364  0010F2                     __ptext0:
   365                           	opt stack 0
   366  0010F2                     _main:
   367                           	opt stack 25
   368                           
   369                           ;test.c: 29: initLCDUI();
   370                           
   371                           ;incstack = 0
   372  0010F2  EC28  F00A         	call	_initLCDUI	;wreg free
   373                           
   374                           ;test.c: 31: moveCursorTo(1, 1);
   375  0010F6  0E00               	movlw	0
   376  0010F8  6E30               	movwf	moveCursorTo@row+1,c
   377  0010FA  0E01               	movlw	1
   378  0010FC  6E2F               	movwf	moveCursorTo@row,c
   379  0010FE  0E00               	movlw	0
   380  001100  6E32               	movwf	moveCursorTo@col+1,c
   381  001102  0E01               	movlw	1
   382  001104  6E31               	movwf	moveCursorTo@col,c
   383  001106  ECE6  F009         	call	_moveCursorTo	;wreg free
   384                           
   385                           ;test.c: 33: displayAlphaNumeric("Hello!");
   386  00110A  0E01               	movlw	low STR_1
   387  00110C  6E30               	movwf	displayAlphaNumeric@message,c
   388  00110E  0E10               	movlw	high STR_1
   389  001110  6E31               	movwf	displayAlphaNumeric@message+1,c
   390  001112  EC56  F009         	call	_displayAlphaNumeric	;wreg free
   391                           
   392                           ;test.c: 35: delay_ms(2000);
   393  001116  0E07               	movlw	7
   394  001118  6E29               	movwf	delay_ms@x+1,c
   395  00111A  0ED0               	movlw	208
   396  00111C  6E28               	movwf	delay_ms@x,c
   397  00111E  ECA0  F009         	call	_delay_ms	;wreg free
   398                           
   399                           ;test.c: 37: clearDisplayAndCursorTo(2, 1);
   400  001122  0E00               	movlw	0
   401  001124  0100               	movlb	0	; () banked
   402  001126  6F61               	movwf	(clearDisplayAndCursorTo@row+1)& (0+255),b
   403  001128  0E02               	movlw	2
   404  00112A  6F60               	movwf	clearDisplayAndCursorTo@row& (0+255),b
   405  00112C  0E00               	movlw	0
   406  00112E  6F63               	movwf	(clearDisplayAndCursorTo@col+1)& (0+255),b
   407  001130  0E01               	movlw	1
   408  001132  6F62               	movwf	clearDisplayAndCursorTo@col& (0+255),b
   409  001134  EC09  F00A         	call	_clearDisplayAndCursorTo	;wreg free
   410                           
   411                           ;test.c: 39: for (int i = 0; i < 4; i++) {
   412  001138  0E00               	movlw	0
   413  00113A  6E34               	movwf	main@i+1,c
   414  00113C  0E00               	movlw	0
   415  00113E  6E33               	movwf	main@i,c
   416  001140                     l1167:
   417  001140  BE34               	btfsc	main@i+1,7,c
   418  001142  D006               	goto	l102
   419  001144  5034               	movf	main@i+1,w,c
   420  001146  E113               	bnz	l1177
   421  001148  0E04               	movlw	4
   422  00114A  5C33               	subwf	main@i,w,c
   423  00114C  B0D8               	btfsc	status,0,c
   424  00114E  D00F               	goto	u360
   425  001150                     l102:
   426                           
   427                           ;test.c: 40: customGraphics(i);
   428  001150  C033  F02F         	movff	main@i,customGraphics@selectedGraphic
   429  001154  C034  F030         	movff	main@i+1,customGraphics@selectedGraphic+1
   430  001158  EC22  F00A         	call	_customGraphics	;wreg free
   431                           
   432                           ;test.c: 41: delay_ms(1000);
   433  00115C  0E03               	movlw	3
   434  00115E  6E29               	movwf	delay_ms@x+1,c
   435  001160  0EE8               	movlw	232
   436  001162  6E28               	movwf	delay_ms@x,c
   437  001164  ECA0  F009         	call	_delay_ms	;wreg free
   438  001168  4A33               	infsnz	main@i,f,c
   439  00116A  2A34               	incf	main@i+1,f,c
   440  00116C  D7E9               	goto	l1167
   441  00116E                     u360:
   442  00116E                     l1177:
   443                           
   444                           ;test.c: 42: }
   445                           ;test.c: 44: delay_ms(2000);
   446  00116E  0E07               	movlw	7
   447  001170  6E29               	movwf	delay_ms@x+1,c
   448  001172  0ED0               	movlw	208
   449  001174  6E28               	movwf	delay_ms@x,c
   450  001176  ECA0  F009         	call	_delay_ms	;wreg free
   451                           
   452                           ;test.c: 46: clearDisplay();
   453  00117A  EC16  F00A         	call	_clearDisplay	;wreg free
   454                           
   455                           ;test.c: 48: moveCursorTo(1, 1);
   456  00117E  0E00               	movlw	0
   457  001180  6E30               	movwf	moveCursorTo@row+1,c
   458  001182  0E01               	movlw	1
   459  001184  6E2F               	movwf	moveCursorTo@row,c
   460  001186  0E00               	movlw	0
   461  001188  6E32               	movwf	moveCursorTo@col+1,c
   462  00118A  0E01               	movlw	1
   463  00118C  6E31               	movwf	moveCursorTo@col,c
   464  00118E  ECE6  F009         	call	_moveCursorTo	;wreg free
   465                           
   466                           ;test.c: 50: displayAlphaNumeric("Bye!");
   467  001192  0E08               	movlw	low STR_2
   468  001194  6E30               	movwf	displayAlphaNumeric@message,c
   469  001196  0E10               	movlw	high STR_2
   470  001198  6E31               	movwf	displayAlphaNumeric@message+1,c
   471  00119A  EC56  F009         	call	_displayAlphaNumeric	;wreg free
   472  00119E                     l104:
   473  00119E  D7FF               	goto	l104
   474  0011A0                     __end_of_main:
   475                           	opt stack 0
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           status	equ	0xFD8
   484                           
   485 ;; *************** function _initLCDUI *****************
   486 ;; Defined at:
   487 ;;		line 15 in file "LCDUI.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;		None
   490 ;; Auto vars:     Size  Location     Type
   491 ;;		None
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   505 ;;Total ram usage:        0 bytes
   506 ;; Hardware stack levels used:    1
   507 ;; Hardware stack levels required when called:    5
   508 ;; This function calls:
   509 ;;		_LCD8init
   510 ;; This function is called by:
   511 ;;		_main
   512 ;; This function uses a non-reentrant model
   513 ;;
   514                           
   515                           	psect	text1
   516  001450                     __ptext1:
   517                           	opt stack 0
   518  001450                     _initLCDUI:
   519                           	opt stack 25
   520                           
   521                           ;LCDUI.c: 17: LCD8init();
   522                           
   523                           ;incstack = 0
   524  001450  EC07  F008         	call	_LCD8init	;wreg free
   525  001454  0012               	return		;funcret
   526  001456                     __end_of_initLCDUI:
   527                           	opt stack 0
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           status	equ	0xFD8
   536                           
   537 ;; *************** function _LCD8init *****************
   538 ;; Defined at:
   539 ;;		line 11 in file "LCD8.c"
   540 ;; Parameters:    Size  Location     Type
   541 ;;		None
   542 ;; Auto vars:     Size  Location     Type
   543 ;;  i               2   32[BANK0 ] int 
   544 ;;  customChar     32    0[BANK0 ] unsigned char [32]
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      void 
   547 ;; Registers used:
   548 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   549 ;; Tracked objects:
   550 ;;		On entry : 0/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   555 ;;      Locals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   557 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   558 ;;Total ram usage:       34 bytes
   559 ;; Hardware stack levels used:    1
   560 ;; Hardware stack levels required when called:    4
   561 ;; This function calls:
   562 ;;		_LCD8send
   563 ;;		_delay_ms
   564 ;;		_delay_us
   565 ;; This function is called by:
   566 ;;		_initLCDUI
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570                           	psect	text2
   571  00100E                     __ptext2:
   572                           	opt stack 0
   573  00100E                     _LCD8init:
   574                           	opt stack 25
   575                           
   576                           ;LCD8.c: 13: TRISE = 0x00;
   577                           
   578                           ;incstack = 0
   579  00100E  0E00               	movlw	0
   580  001010  6E96               	movwf	3990,c	;volatile
   581                           
   582                           ;LCD8.c: 14: TRISH = 0b11111000;
   583  001012  0EF8               	movlw	248
   584  001014  6E99               	movwf	3993,c	;volatile
   585                           
   586                           ;LCD8.c: 15: LATHbits.LATH1 = 0;
   587  001016  9290               	bcf	3984,1,c	;volatile
   588                           
   589                           ;LCD8.c: 16: LATHbits.LATH0 = 0;
   590  001018  9090               	bcf	3984,0,c	;volatile
   591                           
   592                           ;LCD8.c: 17: LATHbits.LATH2 = 0;
   593  00101A  9490               	bcf	3984,2,c	;volatile
   594                           
   595                           ;LCD8.c: 18: delay_ms(200);
   596  00101C  0E00               	movlw	0
   597  00101E  6E29               	movwf	delay_ms@x+1,c
   598  001020  0EC8               	movlw	200
   599  001022  6E28               	movwf	delay_ms@x,c
   600  001024  ECA0  F009         	call	_delay_ms	;wreg free
   601                           
   602                           ;LCD8.c: 20: LCD8send(0x30,0);
   603  001028  0E00               	movlw	0
   604  00102A  6E2D               	movwf	LCD8send@mode,c
   605  00102C  0E30               	movlw	48
   606  00102E  EC83  F009         	call	_LCD8send
   607                           
   608                           ;LCD8.c: 21: LCD8send(0x30,0);
   609  001032  0E00               	movlw	0
   610  001034  6E2D               	movwf	LCD8send@mode,c
   611  001036  0E30               	movlw	48
   612  001038  EC83  F009         	call	_LCD8send
   613                           
   614                           ;LCD8.c: 22: LCD8send(0x30,0);
   615  00103C  0E00               	movlw	0
   616  00103E  6E2D               	movwf	LCD8send@mode,c
   617  001040  0E30               	movlw	48
   618  001042  EC83  F009         	call	_LCD8send
   619                           
   620                           ;LCD8.c: 23: LCD8send(0x38,0);
   621  001046  0E00               	movlw	0
   622  001048  6E2D               	movwf	LCD8send@mode,c
   623  00104A  0E38               	movlw	56
   624  00104C  EC83  F009         	call	_LCD8send
   625                           
   626                           ;LCD8.c: 24: LCD8send(0x10,0);
   627  001050  0E00               	movlw	0
   628  001052  6E2D               	movwf	LCD8send@mode,c
   629  001054  0E10               	movlw	16
   630  001056  EC83  F009         	call	_LCD8send
   631                           
   632                           ;LCD8.c: 25: LCD8send(0x0F,0);
   633  00105A  0E00               	movlw	0
   634  00105C  6E2D               	movwf	LCD8send@mode,c
   635  00105E  0E0F               	movlw	15
   636  001060  EC83  F009         	call	_LCD8send
   637                           
   638                           ;LCD8.c: 26: LCD8send(0x06,0);
   639  001064  0E00               	movlw	0
   640  001066  6E2D               	movwf	LCD8send@mode,c
   641  001068  0E06               	movlw	6
   642  00106A  EC83  F009         	call	_LCD8send
   643                           
   644                           ;LCD8.c: 29: char customChar[] = {
   645                           ;LCD8.c: 31: 0x1F,
   646                           ;LCD8.c: 32: 0x1F,
   647                           ;LCD8.c: 33: 0x00,
   648                           ;LCD8.c: 34: 0x09,
   649                           ;LCD8.c: 35: 0x00,
   650                           ;LCD8.c: 36: 0x04,
   651                           ;LCD8.c: 37: 0x00,
   652                           ;LCD8.c: 38: 0x11,
   653                           ;LCD8.c: 40: 0x1F,
   654                           ;LCD8.c: 41: 0x1F,
   655                           ;LCD8.c: 42: 0x00,
   656                           ;LCD8.c: 43: 0x15,
   657                           ;LCD8.c: 44: 0x11,
   658                           ;LCD8.c: 45: 0x05,
   659                           ;LCD8.c: 46: 0x14,
   660                           ;LCD8.c: 47: 0x15,
   661                           ;LCD8.c: 49: 0x12,
   662                           ;LCD8.c: 50: 0x09,
   663                           ;LCD8.c: 51: 0x12,
   664                           ;LCD8.c: 52: 0x09,
   665                           ;LCD8.c: 53: 0x00,
   666                           ;LCD8.c: 54: 0x1F,
   667                           ;LCD8.c: 55: 0x00,
   668                           ;LCD8.c: 56: 0x1F,
   669                           ;LCD8.c: 58: 0x0E,
   670                           ;LCD8.c: 59: 0x08,
   671  00106E  EE20  F082         	lfsr	2,LCD8init@F5867
   672  001072  EE10  F060         	lfsr	1,LCD8init@customChar
   673  001076  0E1F               	movlw	31
   674  001078                     u281:
   675  001078  CFDB FFE3          	movff	plusw2,plusw1
   676  00107C  06E8               	decf	wreg,f,c
   677  00107E  E2FC               	bc	u281
   678                           
   679                           ;LCD8.c: 68: LCD8send(0x40, 0);
   680  001080  0E00               	movlw	0
   681  001082  6E2D               	movwf	LCD8send@mode,c
   682  001084  0E40               	movlw	64
   683  001086  EC83  F009         	call	_LCD8send
   684                           
   685                           ;LCD8.c: 69: delay_us(30);
   686  00108A  0E00               	movlw	0
   687  00108C  6E29               	movwf	delay_us@x+1,c
   688  00108E  0E1E               	movlw	30
   689  001090  6E28               	movwf	delay_us@x,c
   690  001092  ECD1  F009         	call	_delay_us	;wreg free
   691                           
   692                           ;LCD8.c: 71: for (int i = 0; i < 64; i++) {
   693  001096  0E00               	movlw	0
   694  001098  0100               	movlb	0	; () banked
   695  00109A  6F81               	movwf	(LCD8init@i+1)& (0+255),b
   696  00109C  0E00               	movlw	0
   697  00109E  6F80               	movwf	LCD8init@i& (0+255),b
   698  0010A0                     l1089:
   699                           
   700                           ; BSR set to: 0
   701  0010A0  BF81               	btfsc	(LCD8init@i+1)& (0+255),7,b
   702  0010A2  D006               	goto	l54
   703  0010A4  5181               	movf	(LCD8init@i+1)& (0+255),w,b
   704  0010A6  E119               	bnz	l1101
   705  0010A8  0E40               	movlw	64
   706  0010AA  5D80               	subwf	LCD8init@i& (0+255),w,b
   707  0010AC  B0D8               	btfsc	status,0,c
   708  0010AE  D015               	goto	u300
   709  0010B0                     l54:
   710                           
   711                           ; BSR set to: 0
   712                           ;LCD8.c: 72: LCD8send(customChar[i], 1);
   713                           
   714                           ; BSR set to: 0
   715  0010B0  0E01               	movlw	1
   716  0010B2  6E2D               	movwf	LCD8send@mode,c
   717  0010B4  0E60               	movlw	low LCD8init@customChar
   718  0010B6  2580               	addwf	LCD8init@i& (0+255),w,b
   719  0010B8  6ED9               	movwf	fsr2l,c
   720  0010BA  0E00               	movlw	high LCD8init@customChar
   721  0010BC  2181               	addwfc	(LCD8init@i+1)& (0+255),w,b
   722  0010BE  6EDA               	movwf	fsr2h,c
   723  0010C0  50DF               	movf	indf2,w,c
   724  0010C2  EC83  F009         	call	_LCD8send
   725                           
   726                           ;LCD8.c: 73: delay_us(30);
   727  0010C6  0E00               	movlw	0
   728  0010C8  6E29               	movwf	delay_us@x+1,c
   729  0010CA  0E1E               	movlw	30
   730  0010CC  6E28               	movwf	delay_us@x,c
   731  0010CE  ECD1  F009         	call	_delay_us	;wreg free
   732  0010D2  0100               	movlb	0	; () banked
   733  0010D4  4B80               	infsnz	LCD8init@i& (0+255),f,b
   734  0010D6  2B81               	incf	(LCD8init@i+1)& (0+255),f,b
   735  0010D8  D7E3               	goto	l1089
   736  0010DA                     u300:
   737  0010DA                     l1101:
   738                           
   739                           ; BSR set to: 0
   740                           ;LCD8.c: 74: }
   741                           ;LCD8.c: 76: LCD8send(0x01,0);
   742  0010DA  0E00               	movlw	0
   743  0010DC  6E2D               	movwf	LCD8send@mode,c
   744  0010DE  0E01               	movlw	1
   745  0010E0  EC83  F009         	call	_LCD8send
   746                           
   747                           ;LCD8.c: 77: delay_ms(100);
   748  0010E4  0E00               	movlw	0
   749  0010E6  6E29               	movwf	delay_ms@x+1,c
   750  0010E8  0E64               	movlw	100
   751  0010EA  6E28               	movwf	delay_ms@x,c
   752  0010EC  ECA0  F009         	call	_delay_ms	;wreg free
   753  0010F0  0012               	return		;funcret
   754  0010F2                     __end_of_LCD8init:
   755                           	opt stack 0
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           postdec1	equ	0xFE5
   763                           plusw1	equ	0xFE3
   764                           fsr1l	equ	0xFE1
   765                           indf2	equ	0xFDF
   766                           plusw2	equ	0xFDB
   767                           fsr2h	equ	0xFDA
   768                           fsr2l	equ	0xFD9
   769                           status	equ	0xFD8
   770                           
   771 ;; *************** function _displayAlphaNumeric *****************
   772 ;; Defined at:
   773 ;;		line 42 in file "LCDUI.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;  message         2   47[COMRAM] PTR unsigned char 
   776 ;;		 -> STR_2(5), STR_1(7), 
   777 ;; Auto vars:     Size  Location     Type
   778 ;;  i               2   16[BANK0 ] int 
   779 ;;  buffer         16    0[BANK0 ] unsigned char [16]
   780 ;; Return value:  Size  Location     Type
   781 ;;                  1    wreg      void 
   782 ;; Registers used:
   783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   789 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   790 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   792 ;;      Totals:         2      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   793 ;;Total ram usage:       20 bytes
   794 ;; Hardware stack levels used:    1
   795 ;; Hardware stack levels required when called:    4
   796 ;; This function calls:
   797 ;;		_LCD8send
   798 ;;		_sprintf
   799 ;; This function is called by:
   800 ;;		_main
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           	psect	text3
   805  0012AC                     __ptext3:
   806                           	opt stack 0
   807  0012AC                     _displayAlphaNumeric:
   808                           	opt stack 26
   809                           
   810                           ;LCDUI.c: 44: char buffer[16];
   811                           ;LCDUI.c: 46: sprintf(buffer, message);
   812                           
   813                           ;incstack = 0
   814  0012AC  0E60               	movlw	low displayAlphaNumeric@buffer
   815  0012AE  6E28               	movwf	sprintf@sp,c
   816  0012B0  0E00               	movlw	high displayAlphaNumeric@buffer
   817  0012B2  6E29               	movwf	sprintf@sp+1,c
   818  0012B4  C030  F02A         	movff	displayAlphaNumeric@message,sprintf@f
   819  0012B8  C031  F02B         	movff	displayAlphaNumeric@message+1,sprintf@f+1
   820  0012BC  EC1A  F009         	call	_sprintf	;wreg free
   821                           
   822                           ;LCDUI.c: 48: LCD8send(cursorLocation, 0);
   823  0012C0  0E00               	movlw	0
   824  0012C2  6E2D               	movwf	LCD8send@mode,c
   825  0012C4  5035               	movf	_cursorLocation,w,c
   826  0012C6  EC83  F009         	call	_LCD8send
   827                           
   828                           ;LCDUI.c: 50: for (int i=0; buffer[i] != 0; i++) LCD8send(buffer[i], 1);
   829  0012CA  0E00               	movlw	0
   830  0012CC  0100               	movlb	0	; () banked
   831  0012CE  6F71               	movwf	(displayAlphaNumeric@i+1)& (0+255),b
   832  0012D0  0E00               	movlw	0
   833  0012D2  6F70               	movwf	displayAlphaNumeric@i& (0+255),b
   834  0012D4  D00E               	goto	l29
   835  0012D6                     
   836                           ; BSR set to: 0
   837                           
   838                           ; BSR set to: 0
   839  0012D6  0E01               	movlw	1
   840  0012D8  6E2D               	movwf	LCD8send@mode,c
   841  0012DA  0E60               	movlw	low displayAlphaNumeric@buffer
   842  0012DC  2570               	addwf	displayAlphaNumeric@i& (0+255),w,b
   843  0012DE  6ED9               	movwf	fsr2l,c
   844  0012E0  0E00               	movlw	high displayAlphaNumeric@buffer
   845  0012E2  2171               	addwfc	(displayAlphaNumeric@i+1)& (0+255),w,b
   846  0012E4  6EDA               	movwf	fsr2h,c
   847  0012E6  50DF               	movf	indf2,w,c
   848  0012E8  EC83  F009         	call	_LCD8send
   849  0012EC  0100               	movlb	0	; () banked
   850  0012EE  4B70               	infsnz	displayAlphaNumeric@i& (0+255),f,b
   851  0012F0  2B71               	incf	(displayAlphaNumeric@i+1)& (0+255),f,b
   852  0012F2                     l29:
   853                           
   854                           ; BSR set to: 0
   855                           
   856                           ; BSR set to: 0
   857  0012F2  0E60               	movlw	low displayAlphaNumeric@buffer
   858  0012F4  2570               	addwf	displayAlphaNumeric@i& (0+255),w,b
   859  0012F6  6ED9               	movwf	fsr2l,c
   860  0012F8  0E00               	movlw	high displayAlphaNumeric@buffer
   861  0012FA  2171               	addwfc	(displayAlphaNumeric@i+1)& (0+255),w,b
   862  0012FC  6EDA               	movwf	fsr2h,c
   863  0012FE  50DF               	movf	indf2,w,c
   864  001300  B4D8               	btfsc	status,2,c
   865  001302  0012               	return	
   866  001304  D7E8               	goto	l30
   867  001306                     __end_of_displayAlphaNumeric:
   868                           	opt stack 0
   869                           tblptru	equ	0xFF8
   870                           tblptrh	equ	0xFF7
   871                           tblptrl	equ	0xFF6
   872                           tablat	equ	0xFF5
   873                           postinc0	equ	0xFEE
   874                           wreg	equ	0xFE8
   875                           postdec1	equ	0xFE5
   876                           plusw1	equ	0xFE3
   877                           fsr1l	equ	0xFE1
   878                           indf2	equ	0xFDF
   879                           plusw2	equ	0xFDB
   880                           fsr2h	equ	0xFDA
   881                           fsr2l	equ	0xFD9
   882                           status	equ	0xFD8
   883                           
   884 ;; *************** function _sprintf *****************
   885 ;; Defined at:
   886 ;;		line 492 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  sp              2   39[COMRAM] PTR unsigned char 
   889 ;;		 -> displayAlphaNumeric@buffer(16), 
   890 ;;  f               2   41[COMRAM] PTR const unsigned char 
   891 ;;		 -> STR_2(5), STR_1(7), 
   892 ;; Auto vars:     Size  Location     Type
   893 ;;  tmpval          4    0        struct .
   894 ;;  cp              3    0        PTR const unsigned char 
   895 ;;  ap              2   43[COMRAM] PTR void [1]
   896 ;;		 -> ?_sprintf(2), 
   897 ;;  len             2    0        unsigned int 
   898 ;;  val             2    0        unsigned int 
   899 ;;  c               1   46[COMRAM] char 
   900 ;;  flag            1   45[COMRAM] unsigned char 
   901 ;;  prec            1    0        char 
   902 ;; Return value:  Size  Location     Type
   903 ;;                  2   39[COMRAM] int 
   904 ;; Registers used:
   905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   912 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   914 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   915 ;;Total ram usage:        8 bytes
   916 ;; Hardware stack levels used:    1
   917 ;; Hardware stack levels required when called:    2
   918 ;; This function calls:
   919 ;;		Nothing
   920 ;; This function is called by:
   921 ;;		_displayAlphaNumeric
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           	psect	text4
   926  001234                     __ptext4:
   927                           	opt stack 0
   928  001234                     _sprintf:
   929                           	opt stack 27
   930                           
   931                           ;doprnt.c: 494: va_list ap;
   932                           ;doprnt.c: 499: signed char c;
   933                           ;doprnt.c: 506: signed char prec;
   934                           ;doprnt.c: 508: unsigned char flag;
   935                           ;doprnt.c: 523: union {
   936                           ;doprnt.c: 524: unsigned long vd;
   937                           ;doprnt.c: 525: double integ;
   938                           ;doprnt.c: 526: } tmpval;
   939                           ;doprnt.c: 528: unsigned int val;
   940                           ;doprnt.c: 529: unsigned len;
   941                           ;doprnt.c: 530: const char * cp;
   942                           ;doprnt.c: 533: *ap = __va_start();
   943                           
   944                           ; BSR set to: 0
   945                           ;incstack = 0
   946  001234  0E2C               	movlw	low (?_sprintf+4)
   947  001236  6E2C               	movwf	sprintf@ap,c
   948  001238  0E00               	movlw	high (?_sprintf+4)
   949  00123A  6E2D               	movwf	sprintf@ap+1,c
   950                           
   951                           ;doprnt.c: 536: while(c = *f++) {
   952  00123C  D022               	goto	l119
   953  00123E                     
   954                           ;doprnt.c: 538: if(c != '%')
   955  00123E  0E25               	movlw	37
   956  001240  182F               	xorwf	sprintf@c,w,c
   957  001242  B4D8               	btfsc	status,2,c
   958  001244  D004               	goto	l114
   959  001246  D006               	goto	l118
   960  001248                     l1119:
   961  001248  4A28               	infsnz	sprintf@sp,f,c
   962  00124A  2A29               	incf	sprintf@sp+1,f,c
   963                           
   964                           ;doprnt.c: 542: continue;
   965  00124C  D01A               	goto	l119
   966  00124E                     l114:
   967                           
   968                           ;doprnt.c: 543: }
   969                           ;doprnt.c: 548: flag = 0;
   970  00124E  0E00               	movlw	0
   971  001250  6E2E               	movwf	sprintf@flag,c
   972                           
   973                           ;doprnt.c: 635: switch(c = *f++) {
   974  001252  D007               	goto	l115
   975  001254                     l118:
   976                           
   977                           ;doprnt.c: 809: ((*sp++ = (c)));
   978  001254  C028  FFD9         	movff	sprintf@sp,fsr2l
   979  001258  C029  FFDA         	movff	sprintf@sp+1,fsr2h
   980  00125C  C02F  FFDF         	movff	sprintf@c,indf2
   981  001260  D7F3               	goto	l1119
   982  001262                     l115:
   983  001262  C02A  FFF6         	movff	sprintf@f,tblptrl
   984  001266  C02B  FFF7         	movff	sprintf@f+1,tblptrh
   985  00126A  4A2A               	infsnz	sprintf@f,f,c
   986  00126C  2A2B               	incf	sprintf@f+1,f,c
   987  00126E                     	if	0	;tblptru may be non-zero
   988  00126E                     	endif
   989  00126E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   990  00126E  0E00               	movlw	low (__mediumconst shr (0+16))
   991  001270  6EF8               	movwf	tblptru,c
   992  001272                     	endif
   993  001272  0008               	tblrd		*
   994  001274  CFF5 F02F          	movff	tablat,sprintf@c
   995  001278  502F               	movf	sprintf@c,w,c
   996                           
   997                           ; Switch size 1, requested type "space"
   998                           ; Number of cases is 1, Range of values is 0 to 0
   999                           ; switch strategies available:
  1000                           ; Name         Instructions Cycles
  1001                           ; simple_byte            4     3 (average)
  1002                           ;	Chosen strategy is simple_byte
  1003  00127A  0A00               	xorlw	0	; case 0
  1004  00127C  B4D8               	btfsc	status,2,c
  1005  00127E  D00F               	goto	u330
  1006  001280  D7E9               	goto	l118
  1007  001282                     l119:
  1008                           
  1009                           ;doprnt.c: 1422: {
  1010  001282  C02A  FFF6         	movff	sprintf@f,tblptrl
  1011  001286  C02B  FFF7         	movff	sprintf@f+1,tblptrh
  1012  00128A  4A2A               	infsnz	sprintf@f,f,c
  1013  00128C  2A2B               	incf	sprintf@f+1,f,c
  1014  00128E                     	if	0	;tblptru may be non-zero
  1015  00128E                     	endif
  1016  00128E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1017  00128E  0E00               	movlw	low (__mediumconst shr (0+16))
  1018  001290  6EF8               	movwf	tblptru,c
  1019  001292                     	endif
  1020  001292  0008               	tblrd		*
  1021  001294  CFF5 F02F          	movff	tablat,sprintf@c
  1022  001298  502F               	movf	sprintf@c,w,c
  1023  00129A  A4D8               	btfss	status,2,c
  1024  00129C  D7D0               	goto	l113
  1025  00129E                     u330:
  1026                           
  1027                           ;doprnt.c: 1538: *sp = 0;
  1028                           
  1029                           ;doprnt.c: 1469: }
  1030                           ;doprnt.c: 1533: }
  1031                           ;doprnt.c: 1535: alldone:
  1032  00129E  C028  FFD9         	movff	sprintf@sp,fsr2l
  1033  0012A2  C029  FFDA         	movff	sprintf@sp+1,fsr2h
  1034  0012A6  0E00               	movlw	0
  1035  0012A8  6EDF               	movwf	indf2,c
  1036  0012AA  0012               	return	
  1037  0012AC                     __end_of_sprintf:
  1038                           	opt stack 0
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           postdec1	equ	0xFE5
  1046                           plusw1	equ	0xFE3
  1047                           fsr1l	equ	0xFE1
  1048                           indf2	equ	0xFDF
  1049                           plusw2	equ	0xFDB
  1050                           fsr2h	equ	0xFDA
  1051                           fsr2l	equ	0xFD9
  1052                           status	equ	0xFD8
  1053                           
  1054 ;; *************** function _customGraphics *****************
  1055 ;; Defined at:
  1056 ;;		line 53 in file "LCDUI.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  selectedGrap    2   46[COMRAM] int 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;		None
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, status,2, status,0, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1070 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1073 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1074 ;;Total ram usage:        2 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    4
  1077 ;; This function calls:
  1078 ;;		_LCD8send
  1079 ;; This function is called by:
  1080 ;;		_main
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text5
  1085  001444                     __ptext5:
  1086                           	opt stack 0
  1087  001444                     _customGraphics:
  1088                           	opt stack 26
  1089                           
  1090                           ;LCDUI.c: 58: LCD8send(0x00+selectedGraphic, 1);
  1091                           
  1092                           ;incstack = 0
  1093  001444  0E01               	movlw	1
  1094  001446  6E2D               	movwf	LCD8send@mode,c
  1095  001448  502F               	movf	customGraphics@selectedGraphic,w,c
  1096  00144A  EC83  F009         	call	_LCD8send
  1097  00144E  0012               	return		;funcret
  1098  001450                     __end_of_customGraphics:
  1099                           	opt stack 0
  1100                           tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           postdec1	equ	0xFE5
  1107                           plusw1	equ	0xFE3
  1108                           fsr1l	equ	0xFE1
  1109                           indf2	equ	0xFDF
  1110                           plusw2	equ	0xFDB
  1111                           fsr2h	equ	0xFDA
  1112                           fsr2l	equ	0xFD9
  1113                           status	equ	0xFD8
  1114                           
  1115 ;; *************** function _clearDisplayAndCursorTo *****************
  1116 ;; Defined at:
  1117 ;;		line 35 in file "LCDUI.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;  row             2    0[BANK0 ] int 
  1120 ;;  col             2    2[BANK0 ] int 
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;		None
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      void 
  1125 ;; Registers used:
  1126 ;;		wreg, status,2, status,0, cstack
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1132 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;Total ram usage:        4 bytes
  1137 ;; Hardware stack levels used:    1
  1138 ;; Hardware stack levels required when called:    5
  1139 ;; This function calls:
  1140 ;;		_clearDisplay
  1141 ;;		_moveCursorTo
  1142 ;; This function is called by:
  1143 ;;		_main
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text6
  1148  001412                     __ptext6:
  1149                           	opt stack 0
  1150  001412                     _clearDisplayAndCursorTo:
  1151                           	opt stack 25
  1152                           
  1153                           ;LCDUI.c: 37: clearDisplay();
  1154                           
  1155                           ;incstack = 0
  1156  001412  EC16  F00A         	call	_clearDisplay	;wreg free
  1157                           
  1158                           ;LCDUI.c: 39: moveCursorTo(row, col);
  1159  001416  C060  F02F         	movff	clearDisplayAndCursorTo@row,moveCursorTo@row
  1160  00141A  C061  F030         	movff	clearDisplayAndCursorTo@row+1,moveCursorTo@row+1
  1161  00141E  C062  F031         	movff	clearDisplayAndCursorTo@col,moveCursorTo@col
  1162  001422  C063  F032         	movff	clearDisplayAndCursorTo@col+1,moveCursorTo@col+1
  1163  001426  ECE6  F009         	call	_moveCursorTo	;wreg free
  1164  00142A  0012               	return		;funcret
  1165  00142C                     __end_of_clearDisplayAndCursorTo:
  1166                           	opt stack 0
  1167                           tblptru	equ	0xFF8
  1168                           tblptrh	equ	0xFF7
  1169                           tblptrl	equ	0xFF6
  1170                           tablat	equ	0xFF5
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           postdec1	equ	0xFE5
  1174                           plusw1	equ	0xFE3
  1175                           fsr1l	equ	0xFE1
  1176                           indf2	equ	0xFDF
  1177                           plusw2	equ	0xFDB
  1178                           fsr2h	equ	0xFDA
  1179                           fsr2l	equ	0xFD9
  1180                           status	equ	0xFD8
  1181                           
  1182 ;; *************** function _moveCursorTo *****************
  1183 ;; Defined at:
  1184 ;;		line 27 in file "LCDUI.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  row             2   46[COMRAM] int 
  1187 ;;  col             2   48[COMRAM] int 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2, status,0, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1199 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;Total ram usage:        4 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    4
  1206 ;; This function calls:
  1207 ;;		_LCD8send
  1208 ;; This function is called by:
  1209 ;;		_clearDisplayAndCursorTo
  1210 ;;		_main
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           	psect	text7
  1215  0013CC                     __ptext7:
  1216                           	opt stack 0
  1217  0013CC                     _moveCursorTo:
  1218                           	opt stack 26
  1219                           
  1220                           ;LCDUI.c: 30: cursorLocation = ((row == 2) ? 0xBF + col : 0x7F + col);
  1221                           
  1222                           ;incstack = 0
  1223  0013CC  0E02               	movlw	2
  1224  0013CE  182F               	xorwf	moveCursorTo@row,w,c
  1225  0013D0  1030               	iorwf	moveCursorTo@row+1,w,c
  1226  0013D2  B4D8               	btfsc	status,2,c
  1227  0013D4  D002               	goto	l20
  1228  0013D6  0E7F               	movlw	127
  1229  0013D8  D001               	goto	L1
  1230  0013DA                     l20:
  1231  0013DA  0EBF               	movlw	191
  1232  0013DC                     L1:
  1233  0013DC  2431               	addwf	moveCursorTo@col,w,c
  1234  0013DE  6E35               	movwf	_cursorLocation,c
  1235  0013E0  0E00               	movlw	0
  1236  0013E2  2032               	addwfc	moveCursorTo@col+1,w,c
  1237  0013E4  6E36               	movwf	_cursorLocation+1,c
  1238                           
  1239                           ;LCDUI.c: 32: LCD8send(cursorLocation, 0);
  1240  0013E6  0E00               	movlw	0
  1241  0013E8  6E2D               	movwf	LCD8send@mode,c
  1242  0013EA  5035               	movf	_cursorLocation,w,c
  1243  0013EC  EC83  F009         	call	_LCD8send
  1244  0013F0  0012               	return		;funcret
  1245  0013F2                     __end_of_moveCursorTo:
  1246                           	opt stack 0
  1247                           tblptru	equ	0xFF8
  1248                           tblptrh	equ	0xFF7
  1249                           tblptrl	equ	0xFF6
  1250                           tablat	equ	0xFF5
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           postdec1	equ	0xFE5
  1254                           plusw1	equ	0xFE3
  1255                           fsr1l	equ	0xFE1
  1256                           indf2	equ	0xFDF
  1257                           plusw2	equ	0xFDB
  1258                           fsr2h	equ	0xFDA
  1259                           fsr2l	equ	0xFD9
  1260                           status	equ	0xFD8
  1261                           
  1262 ;; *************** function _clearDisplay *****************
  1263 ;; Defined at:
  1264 ;;		line 20 in file "LCDUI.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;		None
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;		None
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      void 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0, cstack
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1282 ;;Total ram usage:        0 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; Hardware stack levels required when called:    4
  1285 ;; This function calls:
  1286 ;;		_LCD8send
  1287 ;;		_delay_ms
  1288 ;; This function is called by:
  1289 ;;		_clearDisplayAndCursorTo
  1290 ;;		_main
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text8
  1295  00142C                     __ptext8:
  1296                           	opt stack 0
  1297  00142C                     _clearDisplay:
  1298                           	opt stack 25
  1299                           
  1300                           ;LCDUI.c: 22: LCD8send(0x01, 0);
  1301                           
  1302                           ;incstack = 0
  1303  00142C  0E00               	movlw	0
  1304  00142E  6E2D               	movwf	LCD8send@mode,c
  1305  001430  0E01               	movlw	1
  1306  001432  EC83  F009         	call	_LCD8send
  1307                           
  1308                           ;LCDUI.c: 24: delay_ms(50);
  1309  001436  0E00               	movlw	0
  1310  001438  6E29               	movwf	delay_ms@x+1,c
  1311  00143A  0E32               	movlw	50
  1312  00143C  6E28               	movwf	delay_ms@x,c
  1313  00143E  ECA0  F009         	call	_delay_ms	;wreg free
  1314  001442  0012               	return		;funcret
  1315  001444                     __end_of_clearDisplay:
  1316                           	opt stack 0
  1317                           tblptru	equ	0xFF8
  1318                           tblptrh	equ	0xFF7
  1319                           tblptrl	equ	0xFF6
  1320                           tablat	equ	0xFF5
  1321                           postinc0	equ	0xFEE
  1322                           wreg	equ	0xFE8
  1323                           postdec1	equ	0xFE5
  1324                           plusw1	equ	0xFE3
  1325                           fsr1l	equ	0xFE1
  1326                           indf2	equ	0xFDF
  1327                           plusw2	equ	0xFDB
  1328                           fsr2h	equ	0xFDA
  1329                           fsr2l	equ	0xFD9
  1330                           status	equ	0xFD8
  1331                           
  1332 ;; *************** function _LCD8send *****************
  1333 ;; Defined at:
  1334 ;;		line 80 in file "LCD8.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;  c               1    wreg     unsigned char 
  1337 ;;  mode            1   44[COMRAM] unsigned char 
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;  c               1   45[COMRAM] unsigned char 
  1340 ;; Return value:  Size  Location     Type
  1341 ;;                  1    wreg      void 
  1342 ;; Registers used:
  1343 ;;		wreg, status,2, status,0, cstack
  1344 ;; Tracked objects:
  1345 ;;		On entry : 0/0
  1346 ;;		On exit  : 0/0
  1347 ;;		Unchanged: 0/0
  1348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1349 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1350 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1352 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1353 ;;Total ram usage:        2 bytes
  1354 ;; Hardware stack levels used:    1
  1355 ;; Hardware stack levels required when called:    3
  1356 ;; This function calls:
  1357 ;;		_delay_ms
  1358 ;;		_delay_us
  1359 ;; This function is called by:
  1360 ;;		_clearDisplay
  1361 ;;		_moveCursorTo
  1362 ;;		_displayAlphaNumeric
  1363 ;;		_customGraphics
  1364 ;;		_LCD8init
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text9
  1369  001306                     __ptext9:
  1370                           	opt stack 0
  1371  001306                     _LCD8send:
  1372                           	opt stack 26
  1373                           
  1374                           ;incstack = 0
  1375                           ;LCD8send@c stored from wreg
  1376  001306  6E2E               	movwf	LCD8send@c,c
  1377                           
  1378                           ;LCD8.c: 82: LATHbits.LATH2 = mode;
  1379  001308  B02D               	btfsc	LCD8send@mode,0,c
  1380  00130A  D002               	bra	u275
  1381  00130C  9490               	bcf	3984,2,c	;volatile
  1382  00130E  D001               	bra	u276
  1383  001310                     u275:
  1384  001310  8490               	bsf	3984,2,c	;volatile
  1385  001312                     u276:
  1386                           
  1387                           ;LCD8.c: 83: delay_ms(1);
  1388  001312  0E00               	movlw	0
  1389  001314  6E29               	movwf	delay_ms@x+1,c
  1390  001316  0E01               	movlw	1
  1391  001318  6E28               	movwf	delay_ms@x,c
  1392  00131A  ECA0  F009         	call	_delay_ms	;wreg free
  1393                           
  1394                           ;LCD8.c: 85: LATE = c;
  1395  00131E  C02E  FF8D         	movff	LCD8send@c,3981	;volatile
  1396                           
  1397                           ;LCD8.c: 86: LATHbits.LATH0 = 1;
  1398  001322  8090               	bsf	3984,0,c	;volatile
  1399                           
  1400                           ;LCD8.c: 87: delay_us(1);
  1401  001324  0E00               	movlw	0
  1402  001326  6E29               	movwf	delay_us@x+1,c
  1403  001328  0E01               	movlw	1
  1404  00132A  6E28               	movwf	delay_us@x,c
  1405  00132C  ECD1  F009         	call	_delay_us	;wreg free
  1406                           
  1407                           ;LCD8.c: 88: LATHbits.LATH0 = 0;
  1408  001330  9090               	bcf	3984,0,c	;volatile
  1409                           
  1410                           ;LCD8.c: 89: delay_us(50);
  1411  001332  0E00               	movlw	0
  1412  001334  6E29               	movwf	delay_us@x+1,c
  1413  001336  0E32               	movlw	50
  1414  001338  6E28               	movwf	delay_us@x,c
  1415  00133A  ECD1  F009         	call	_delay_us	;wreg free
  1416  00133E  0012               	return		;funcret
  1417  001340                     __end_of_LCD8send:
  1418                           	opt stack 0
  1419                           tblptru	equ	0xFF8
  1420                           tblptrh	equ	0xFF7
  1421                           tblptrl	equ	0xFF6
  1422                           tablat	equ	0xFF5
  1423                           postinc0	equ	0xFEE
  1424                           wreg	equ	0xFE8
  1425                           postdec1	equ	0xFE5
  1426                           plusw1	equ	0xFE3
  1427                           fsr1l	equ	0xFE1
  1428                           indf2	equ	0xFDF
  1429                           plusw2	equ	0xFDB
  1430                           fsr2h	equ	0xFDA
  1431                           fsr2l	equ	0xFD9
  1432                           status	equ	0xFD8
  1433                           
  1434 ;; *************** function _delay_us *****************
  1435 ;; Defined at:
  1436 ;;		line 15 in file "delay.c"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;  x               2   39[COMRAM] int 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;  i               2   42[COMRAM] int 
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg, status,2, status,0
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1451 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1454 ;;Total ram usage:        5 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; Hardware stack levels required when called:    2
  1457 ;; This function calls:
  1458 ;;		Nothing
  1459 ;; This function is called by:
  1460 ;;		_LCD8init
  1461 ;;		_LCD8send
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           	psect	text10
  1466  0013A2                     __ptext10:
  1467                           	opt stack 0
  1468  0013A2                     _delay_us:
  1469                           	opt stack 26
  1470                           
  1471                           ;delay.c: 17: for (int i = 0; i < x; i++)
  1472                           
  1473                           ;incstack = 0
  1474  0013A2  0E00               	movlw	0
  1475  0013A4  6E2C               	movwf	delay_us@i+1,c
  1476  0013A6  0E00               	movlw	0
  1477  0013A8  6E2B               	movwf	delay_us@i,c
  1478  0013AA  D005               	goto	l70
  1479  0013AC                     l71:
  1480                           
  1481                           ;delay.c: 18: {
  1482                           ;delay.c: 19: _delay((unsigned long)((1)*(25000000/4000000.0)));
  1483  0013AC  D000               	nop2		;2 cycle nop
  1484  0013AE  D000               	nop2		;2 cycle nop
  1485  0013B0  D000               	nop2		;2 cycle nop
  1486  0013B2  4A2B               	infsnz	delay_us@i,f,c
  1487  0013B4  2A2C               	incf	delay_us@i+1,f,c
  1488  0013B6                     l70:
  1489  0013B6  5028               	movf	delay_us@x,w,c
  1490  0013B8  5C2B               	subwf	delay_us@i,w,c
  1491  0013BA  502C               	movf	delay_us@i+1,w,c
  1492  0013BC  0A80               	xorlw	128
  1493  0013BE  6E2A               	movwf	??_delay_us& (0+255),c
  1494  0013C0  5029               	movf	delay_us@x+1,w,c
  1495  0013C2  0A80               	xorlw	128
  1496  0013C4  582A               	subwfb	??_delay_us& (0+255),w,c
  1497  0013C6  B0D8               	btfsc	status,0,c
  1498  0013C8  0012               	return	
  1499  0013CA  D7F0               	goto	l71
  1500  0013CC                     __end_of_delay_us:
  1501                           	opt stack 0
  1502                           tblptru	equ	0xFF8
  1503                           tblptrh	equ	0xFF7
  1504                           tblptrl	equ	0xFF6
  1505                           tablat	equ	0xFF5
  1506                           postinc0	equ	0xFEE
  1507                           wreg	equ	0xFE8
  1508                           postdec1	equ	0xFE5
  1509                           plusw1	equ	0xFE3
  1510                           fsr1l	equ	0xFE1
  1511                           indf2	equ	0xFDF
  1512                           plusw2	equ	0xFDB
  1513                           fsr2h	equ	0xFDA
  1514                           fsr2l	equ	0xFD9
  1515                           status	equ	0xFD8
  1516                           
  1517 ;; *************** function _delay_ms *****************
  1518 ;; Defined at:
  1519 ;;		line 7 in file "delay.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  x               2   39[COMRAM] int 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  i               2   42[COMRAM] int 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      void 
  1526 ;; Registers used:
  1527 ;;		wreg, status,2, status,0
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1533 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1536 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1537 ;;Total ram usage:        5 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    2
  1540 ;; This function calls:
  1541 ;;		Nothing
  1542 ;; This function is called by:
  1543 ;;		_clearDisplay
  1544 ;;		_LCD8init
  1545 ;;		_LCD8send
  1546 ;;		_main
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           	psect	text11
  1551  001340                     __ptext11:
  1552                           	opt stack 0
  1553  001340                     _delay_ms:
  1554                           	opt stack 26
  1555                           
  1556                           ;delay.c: 9: for (int i = 0; i < x; i++)
  1557                           
  1558                           ;incstack = 0
  1559  001340  0E00               	movlw	0
  1560  001342  6E2C               	movwf	delay_ms@i+1,c
  1561  001344  0E00               	movlw	0
  1562  001346  6E2B               	movwf	delay_ms@i,c
  1563  001348  D00A               	goto	l64
  1564  00134A                     
  1565                           ;delay.c: 10: {
  1566                           ;delay.c: 11: _delay((unsigned long)((1)*(25000000/4000.0)));
  1567  00134A  0E09               	movlw	9
  1568  00134C  6E2A               	movwf	??_delay_ms& (0+255),c
  1569  00134E  0E1C               	movlw	28
  1570  001350                     u377:
  1571  001350  2EE8               	decfsz	wreg,f,c
  1572  001352  D7FE               	bra	u377
  1573  001354  2E2A               	decfsz	??_delay_ms& (0+255),f,c
  1574  001356  D7FC               	bra	u377
  1575  001358  D000               	nop2	
  1576  00135A  4A2B               	infsnz	delay_ms@i,f,c
  1577  00135C  2A2C               	incf	delay_ms@i+1,f,c
  1578  00135E                     l64:
  1579  00135E  5028               	movf	delay_ms@x,w,c
  1580  001360  5C2B               	subwf	delay_ms@i,w,c
  1581  001362  502C               	movf	delay_ms@i+1,w,c
  1582  001364  0A80               	xorlw	128
  1583  001366  6E2A               	movwf	??_delay_ms& (0+255),c
  1584  001368  5029               	movf	delay_ms@x+1,w,c
  1585  00136A  0A80               	xorlw	128
  1586  00136C  582A               	subwfb	??_delay_ms& (0+255),w,c
  1587  00136E  B0D8               	btfsc	status,0,c
  1588  001370  0012               	return	
  1589  001372  D7EB               	goto	l65
  1590  001374                     __end_of_delay_ms:
  1591                           	opt stack 0
  1592                           tblptru	equ	0xFF8
  1593                           tblptrh	equ	0xFF7
  1594                           tblptrl	equ	0xFF6
  1595                           tablat	equ	0xFF5
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postdec1	equ	0xFE5
  1599                           plusw1	equ	0xFE3
  1600                           fsr1l	equ	0xFE1
  1601                           indf2	equ	0xFDF
  1602                           plusw2	equ	0xFDB
  1603                           fsr2h	equ	0xFDA
  1604                           fsr2l	equ	0xFD9
  1605                           status	equ	0xFD8
  1606                           
  1607 ;; *************** function _LowIsr *****************
  1608 ;; Defined at:
  1609 ;;		line 22 in file "test.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;		None
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		None
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1625 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1626 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1627 ;;Total ram usage:       21 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    1
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		Interrupt level 1
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           	psect	intcodelo
  1638  000018                     __pintcodelo:
  1639                           	opt stack 0
  1640  000018                     _LowIsr:
  1641                           	opt stack 25
  1642                           
  1643                           ;incstack = 0
  1644  000018  8037               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1645  00001A  CFD8 F013          	movff	status,??_LowIsr
  1646  00001E  CFE8 F014          	movff	wreg,??_LowIsr+1
  1647  000022  CFE0 F015          	movff	bsr,??_LowIsr+2
  1648  000026  CFFA F016          	movff	pclath,??_LowIsr+3
  1649  00002A  CFFB F017          	movff	pclatu,??_LowIsr+4
  1650  00002E  CFE9 F018          	movff	fsr0l,??_LowIsr+5
  1651  000032  CFEA F019          	movff	fsr0h,??_LowIsr+6
  1652  000036  CFE1 F01A          	movff	fsr1l,??_LowIsr+7
  1653  00003A  CFE2 F01B          	movff	fsr1h,??_LowIsr+8
  1654  00003E  CFD9 F01C          	movff	fsr2l,??_LowIsr+9
  1655  000042  CFDA F01D          	movff	fsr2h,??_LowIsr+10
  1656  000046  CFF3 F01E          	movff	prodl,??_LowIsr+11
  1657  00004A  CFF4 F01F          	movff	prodh,??_LowIsr+12
  1658  00004E  CFF6 F020          	movff	tblptrl,??_LowIsr+13
  1659  000052  CFF7 F021          	movff	tblptrh,??_LowIsr+14
  1660  000056  CFF8 F022          	movff	tblptru,??_LowIsr+15
  1661  00005A  CFF5 F023          	movff	tablat,??_LowIsr+16
  1662  00005E  C037  F024         	movff	btemp,??_LowIsr+17
  1663  000062  C038  F025         	movff	btemp+1,??_LowIsr+18
  1664  000066  C039  F026         	movff	btemp+2,??_LowIsr+19
  1665  00006A  C03A  F027         	movff	btemp+3,??_LowIsr+20
  1666  00006E  C027  F03A         	movff	??_LowIsr+20,btemp+3
  1667  000072  C026  F039         	movff	??_LowIsr+19,btemp+2
  1668  000076  C025  F038         	movff	??_LowIsr+18,btemp+1
  1669  00007A  C024  F037         	movff	??_LowIsr+17,btemp
  1670  00007E  C023  FFF5         	movff	??_LowIsr+16,tablat
  1671  000082  C022  FFF8         	movff	??_LowIsr+15,tblptru
  1672  000086  C021  FFF7         	movff	??_LowIsr+14,tblptrh
  1673  00008A  C020  FFF6         	movff	??_LowIsr+13,tblptrl
  1674  00008E  C01F  FFF4         	movff	??_LowIsr+12,prodh
  1675  000092  C01E  FFF3         	movff	??_LowIsr+11,prodl
  1676  000096  C01D  FFDA         	movff	??_LowIsr+10,fsr2h
  1677  00009A  C01C  FFD9         	movff	??_LowIsr+9,fsr2l
  1678  00009E  C01B  FFE2         	movff	??_LowIsr+8,fsr1h
  1679  0000A2  C01A  FFE1         	movff	??_LowIsr+7,fsr1l
  1680  0000A6  C019  FFEA         	movff	??_LowIsr+6,fsr0h
  1681  0000AA  C018  FFE9         	movff	??_LowIsr+5,fsr0l
  1682  0000AE  C017  FFFB         	movff	??_LowIsr+4,pclatu
  1683  0000B2  C016  FFFA         	movff	??_LowIsr+3,pclath
  1684  0000B6  C015  FFE0         	movff	??_LowIsr+2,bsr
  1685  0000BA  C014  FFE8         	movff	??_LowIsr+1,wreg
  1686  0000BE  C013  FFD8         	movff	??_LowIsr,status
  1687  0000C2  9037               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1688  0000C4  0010               	retfie	
  1689  0000C6                     __end_of_LowIsr:
  1690                           	opt stack 0
  1691                           pclatu	equ	0xFFB
  1692                           pclath	equ	0xFFA
  1693                           tblptru	equ	0xFF8
  1694                           tblptrh	equ	0xFF7
  1695                           tblptrl	equ	0xFF6
  1696                           tablat	equ	0xFF5
  1697                           prodh	equ	0xFF4
  1698                           prodl	equ	0xFF3
  1699                           postinc0	equ	0xFEE
  1700                           fsr0h	equ	0xFEA
  1701                           fsr0l	equ	0xFE9
  1702                           wreg	equ	0xFE8
  1703                           postdec1	equ	0xFE5
  1704                           plusw1	equ	0xFE3
  1705                           fsr1h	equ	0xFE2
  1706                           fsr1l	equ	0xFE1
  1707                           bsr	equ	0xFE0
  1708                           indf2	equ	0xFDF
  1709                           plusw2	equ	0xFDB
  1710                           fsr2h	equ	0xFDA
  1711                           fsr2l	equ	0xFD9
  1712                           status	equ	0xFD8
  1713                           
  1714 ;; *************** function _HighIsr *****************
  1715 ;; Defined at:
  1716 ;;		line 17 in file "test.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;		None
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;		None
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  1    wreg      void 
  1723 ;; Registers used:
  1724 ;;		None
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;Total ram usage:       18 bytes
  1735 ;; Hardware stack levels used:    1
  1736 ;; This function calls:
  1737 ;;		Nothing
  1738 ;; This function is called by:
  1739 ;;		Interrupt level 2
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	intcode
  1744  000008                     __pintcode:
  1745                           	opt stack 0
  1746  000008                     _HighIsr:
  1747                           	opt stack 25
  1748                           
  1749                           ;incstack = 0
  1750  000008  8237               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1751  00000A  EFD0  F008         	goto	int_func
  1752                           pclatu	equ	0xFFB
  1753                           pclath	equ	0xFFA
  1754                           tblptru	equ	0xFF8
  1755                           tblptrh	equ	0xFF7
  1756                           tblptrl	equ	0xFF6
  1757                           tablat	equ	0xFF5
  1758                           prodh	equ	0xFF4
  1759                           prodl	equ	0xFF3
  1760                           postinc0	equ	0xFEE
  1761                           fsr0h	equ	0xFEA
  1762                           fsr0l	equ	0xFE9
  1763                           wreg	equ	0xFE8
  1764                           postdec1	equ	0xFE5
  1765                           plusw1	equ	0xFE3
  1766                           fsr1h	equ	0xFE2
  1767                           fsr1l	equ	0xFE1
  1768                           bsr	equ	0xFE0
  1769                           indf2	equ	0xFDF
  1770                           plusw2	equ	0xFDB
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           
  1775                           	psect	intcode_body
  1776  0011A0                     __pintcode_body:
  1777                           	opt stack 25
  1778  0011A0                     int_func:
  1779                           	opt stack 25
  1780  0011A0  CFFA F001          	movff	pclath,??_HighIsr
  1781  0011A4  CFFB F002          	movff	pclatu,??_HighIsr+1
  1782  0011A8  CFE9 F003          	movff	fsr0l,??_HighIsr+2
  1783  0011AC  CFEA F004          	movff	fsr0h,??_HighIsr+3
  1784  0011B0  CFE1 F005          	movff	fsr1l,??_HighIsr+4
  1785  0011B4  CFE2 F006          	movff	fsr1h,??_HighIsr+5
  1786  0011B8  CFD9 F007          	movff	fsr2l,??_HighIsr+6
  1787  0011BC  CFDA F008          	movff	fsr2h,??_HighIsr+7
  1788  0011C0  CFF3 F009          	movff	prodl,??_HighIsr+8
  1789  0011C4  CFF4 F00A          	movff	prodh,??_HighIsr+9
  1790  0011C8  CFF6 F00B          	movff	tblptrl,??_HighIsr+10
  1791  0011CC  CFF7 F00C          	movff	tblptrh,??_HighIsr+11
  1792  0011D0  CFF8 F00D          	movff	tblptru,??_HighIsr+12
  1793  0011D4  CFF5 F00E          	movff	tablat,??_HighIsr+13
  1794  0011D8  C037  F00F         	movff	btemp,??_HighIsr+14
  1795  0011DC  C038  F010         	movff	btemp+1,??_HighIsr+15
  1796  0011E0  C039  F011         	movff	btemp+2,??_HighIsr+16
  1797  0011E4  C03A  F012         	movff	btemp+3,??_HighIsr+17
  1798  0011E8  C012  F03A         	movff	??_HighIsr+17,btemp+3
  1799  0011EC  C011  F039         	movff	??_HighIsr+16,btemp+2
  1800  0011F0  C010  F038         	movff	??_HighIsr+15,btemp+1
  1801  0011F4  C00F  F037         	movff	??_HighIsr+14,btemp
  1802  0011F8  C00E  FFF5         	movff	??_HighIsr+13,tablat
  1803  0011FC  C00D  FFF8         	movff	??_HighIsr+12,tblptru
  1804  001200  C00C  FFF7         	movff	??_HighIsr+11,tblptrh
  1805  001204  C00B  FFF6         	movff	??_HighIsr+10,tblptrl
  1806  001208  C00A  FFF4         	movff	??_HighIsr+9,prodh
  1807  00120C  C009  FFF3         	movff	??_HighIsr+8,prodl
  1808  001210  C008  FFDA         	movff	??_HighIsr+7,fsr2h
  1809  001214  C007  FFD9         	movff	??_HighIsr+6,fsr2l
  1810  001218  C006  FFE2         	movff	??_HighIsr+5,fsr1h
  1811  00121C  C005  FFE1         	movff	??_HighIsr+4,fsr1l
  1812  001220  C004  FFEA         	movff	??_HighIsr+3,fsr0h
  1813  001224  C003  FFE9         	movff	??_HighIsr+2,fsr0l
  1814  001228  C002  FFFB         	movff	??_HighIsr+1,pclatu
  1815  00122C  C001  FFFA         	movff	??_HighIsr,pclath
  1816  001230  9237               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1817  001232  0011               	retfie		f
  1818  001234                     __end_of_HighIsr:
  1819                           	opt stack 0
  1820                           pclatu	equ	0xFFB
  1821                           pclath	equ	0xFFA
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           prodh	equ	0xFF4
  1827                           prodl	equ	0xFF3
  1828                           postinc0	equ	0xFEE
  1829                           fsr0h	equ	0xFEA
  1830                           fsr0l	equ	0xFE9
  1831                           wreg	equ	0xFE8
  1832                           postdec1	equ	0xFE5
  1833                           plusw1	equ	0xFE3
  1834                           fsr1h	equ	0xFE2
  1835                           fsr1l	equ	0xFE1
  1836                           bsr	equ	0xFE0
  1837                           indf2	equ	0xFDF
  1838                           plusw2	equ	0xFDB
  1839                           fsr2h	equ	0xFDA
  1840                           fsr2l	equ	0xFD9
  1841                           status	equ	0xFD8
  1842                           pclatu	equ	0xFFB
  1843                           pclath	equ	0xFFA
  1844                           tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           prodh	equ	0xFF4
  1849                           prodl	equ	0xFF3
  1850                           postinc0	equ	0xFEE
  1851                           fsr0h	equ	0xFEA
  1852                           fsr0l	equ	0xFE9
  1853                           wreg	equ	0xFE8
  1854                           postdec1	equ	0xFE5
  1855                           plusw1	equ	0xFE3
  1856                           fsr1h	equ	0xFE2
  1857                           fsr1l	equ	0xFE1
  1858                           bsr	equ	0xFE0
  1859                           indf2	equ	0xFDF
  1860                           plusw2	equ	0xFDB
  1861                           fsr2h	equ	0xFDA
  1862                           fsr2l	equ	0xFD9
  1863                           status	equ	0xFD8
  1864                           
  1865                           	psect	rparam
  1866  0000                     pclatu	equ	0xFFB
  1867                           pclath	equ	0xFFA
  1868                           tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           prodh	equ	0xFF4
  1873                           prodl	equ	0xFF3
  1874                           postinc0	equ	0xFEE
  1875                           fsr0h	equ	0xFEA
  1876                           fsr0l	equ	0xFE9
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           plusw1	equ	0xFE3
  1880                           fsr1h	equ	0xFE2
  1881                           fsr1l	equ	0xFE1
  1882                           bsr	equ	0xFE0
  1883                           indf2	equ	0xFDF
  1884                           plusw2	equ	0xFDB
  1885                           fsr2h	equ	0xFDA
  1886                           fsr2l	equ	0xFD9
  1887                           status	equ	0xFD8
  1888                           
  1889                           	psect	temp
  1890  000037                     btemp:
  1891                           	opt stack 0
  1892  000037                     	ds	1
  1893  0000                     int$flags	set	btemp
  1894  0000                     wtemp6	set	btemp+1
  1895                           pclatu	equ	0xFFB
  1896                           pclath	equ	0xFFA
  1897                           tblptru	equ	0xFF8
  1898                           tblptrh	equ	0xFF7
  1899                           tblptrl	equ	0xFF6
  1900                           tablat	equ	0xFF5
  1901                           prodh	equ	0xFF4
  1902                           prodl	equ	0xFF3
  1903                           postinc0	equ	0xFEE
  1904                           fsr0h	equ	0xFEA
  1905                           fsr0l	equ	0xFE9
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           plusw1	equ	0xFE3
  1909                           fsr1h	equ	0xFE2
  1910                           fsr1l	equ	0xFE1
  1911                           bsr	equ	0xFE0
  1912                           indf2	equ	0xFDF
  1913                           plusw2	equ	0xFDB
  1914                           fsr2h	equ	0xFDA
  1915                           fsr2l	equ	0xFD9
  1916                           status	equ	0xFD8


Data Sizes:
    Strings     12
    Constant    0
    Data        32
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      54
    BANK0           160     34      66
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[5]), STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> displayAlphaNumeric@buffer(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    displayAlphaNumeric@message	PTR unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[5]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_moveCursorTo
    _LCD8init->_LCD8send
    _displayAlphaNumeric->_sprintf
    _customGraphics->_LCD8send
    _clearDisplayAndCursorTo->_moveCursorTo
    _moveCursorTo->_LCD8send
    _clearDisplay->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in COMRAM

    None.

Critical Paths under _HighIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _initLCDUI->_LCD8init

Critical Paths under _LowIsr in BANK0

    None.

Critical Paths under _HighIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowIsr in BANK1

    None.

Critical Paths under _HighIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowIsr in BANK2

    None.

Critical Paths under _HighIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowIsr in BANK3

    None.

Critical Paths under _HighIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowIsr in BANK4

    None.

Critical Paths under _HighIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowIsr in BANK5

    None.

Critical Paths under _HighIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowIsr in BANK6

    None.

Critical Paths under _HighIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowIsr in BANK7

    None.

Critical Paths under _HighIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowIsr in BANK8

    None.

Critical Paths under _HighIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowIsr in BANK9

    None.

Critical Paths under _HighIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowIsr in BANK10

    None.

Critical Paths under _HighIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowIsr in BANK11

    None.

Critical Paths under _HighIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowIsr in BANK12

    None.

Critical Paths under _HighIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowIsr in BANK13

    None.

Critical Paths under _HighIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _LowIsr in BANK14

    None.

Critical Paths under _HighIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _LowIsr in BANK15

    None.

Critical Paths under _HighIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   23692
                                             50 COMRAM     2     2      0
                       _clearDisplay
            _clearDisplayAndCursorTo
                     _customGraphics
                           _delay_ms
                _displayAlphaNumeric
                          _initLCDUI
                       _moveCursorTo
 ---------------------------------------------------------------------------------
 (1) _initLCDUI                                            0     0      0    3800
                           _LCD8init
 ---------------------------------------------------------------------------------
 (2) _LCD8init                                            34    34      0    3800
                                              0 BANK0     34    34      0
                           _LCD8send
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _displayAlphaNumeric                                 20    18      2    3380
                                             47 COMRAM     2     0      2
                                              0 BANK0     18    18      0
                           _LCD8send
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             20    16      4     446
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _customGraphics                                       2     0      2    2659
                                             46 COMRAM     2     0      2
                           _LCD8send
 ---------------------------------------------------------------------------------
 (1) _clearDisplayAndCursorTo                              4     0      4    6649
                                              0 BANK0      4     0      4
                       _clearDisplay
                       _moveCursorTo
 ---------------------------------------------------------------------------------
 (1) _moveCursorTo                                         4     0      4    3171
                                             46 COMRAM     4     0      4
                           _LCD8send
 ---------------------------------------------------------------------------------
 (2) _clearDisplay                                         0     0      0    3236
                           _LCD8send
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _LCD8send                                             2     1      1    2538
                                             44 COMRAM     2     1      1
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     3      2     428
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             5     3      2     698
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowIsr                                              21    21      0       0
                                             18 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighIsr                                             18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearDisplay
     _LCD8send
       _delay_ms
       _delay_us
     _delay_ms
   _clearDisplayAndCursorTo
     _clearDisplay
       _LCD8send
         _delay_ms
         _delay_us
       _delay_ms
     _moveCursorTo
       _LCD8send
         _delay_ms
         _delay_us
   _customGraphics
     _LCD8send
       _delay_ms
       _delay_us
   _delay_ms
   _displayAlphaNumeric
     _LCD8send
       _delay_ms
       _delay_us
     _sprintf
   _initLCDUI
     _LCD8init
       _LCD8send
         _delay_ms
         _delay_us
       _delay_ms
       _delay_us
   _moveCursorTo
     _LCD8send
       _delay_ms
       _delay_us

 _LowIsr (ROOT)

 _HighIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0       0      38        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      42       5       41.2%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      36       1       57.4%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      78      29        0.0%
DATA                 0      0      78       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Aug 13 16:44:20 2018

                              l20 13DA                                l30 12D6  
                              l29 12F2                                l70 13B6  
                              l54 10B0                                l71 13AC  
                              l64 135E                                l65 134A  
                              bsr 000FE0                               l102 1150  
                             l104 119E                               l113 123E  
                             l114 124E                               l115 1262  
                             l118 1254                               l119 1282  
                             u300 10DA                               u330 129E  
                             u360 116E                               u281 1078  
                             u275 1310                               u276 1312  
                             u377 1350                               wreg 000FE8  
                    __CFG_FOSC$HS 000000              displayAlphaNumeric@i 0070  
                    __CFG_WDT$OFF 000000                              l1101 10DA  
                            l1119 1248                              l1167 1140  
                            l1089 10A0                              l1177 116E  
                            STR_1 1001                              STR_2 1008  
                            _LATE 000F8D                              _main 10F2  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0037  
                            prodh 000FF4                              prodl 000FF3  
                            start 00C6                   __end_of_HighIsr 1234  
                    ___param_bank 000000              __end_of_clearDisplay 1444  
      clearDisplayAndCursorTo@col 0062        clearDisplayAndCursorTo@row 0060  
                __end_of_LCD8init 10F2                  __end_of_LCD8send 1340  
                ??_customGraphics 0031                   moveCursorTo@col 0031  
                 moveCursorTo@row 002F                             ?_main 0001  
                           _TRISE 000F96                             _TRISH 000F99  
__size_of_clearDisplayAndCursorTo 001A                             main@i 0033  
                           pclath 000FFA                             tablat 000FF5  
                           plusw1 000FE3                             plusw2 000FDB  
                           status 000FD8                             wtemp6 0038  
                 __end_of_sprintf 12AC                   __initialization 1374  
                    __end_of_main 11A0                            ??_main 0033  
                   __activetblptr 000003                         ??_HighIsr 0001  
                __end_of_delay_ms 1374                  __end_of_delay_us 13CC  
                  __CFG_XINST$OFF 000000                            _LowIsr 0018  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_sprintf 002C                         LCD8init@i 0080  
                       LCD8send@c 002E                         ?_LCD8init 0001  
                       ?_LCD8send 002D                        __accesstop 0060  
         __end_of__initialization 1398             __size_of_clearDisplay 0018  
                   ___rparam_used 000001                    __pcstackCOMRAM 0001  
                    __pidataBANK0 13F2       __end_of_displayAlphaNumeric 1306  
         _clearDisplayAndCursorTo 1412                      _clearDisplay 142C  
              __size_of_initLCDUI 0006                        ??_LCD8init 002F  
                      ??_LCD8send 002E                           ?_LowIsr 0001  
                   ?_moveCursorTo 002F                         ?_delay_ms 0028  
                       ?_delay_us 0028                           _HighIsr 0008  
                         __Hparam 0000                           __Lparam 0000  
                 __size_of_LowIsr 00AE                    ??_moveCursorTo 0033  
                    __psmallconst 1000                 __end_of_initLCDUI 1456  
                         __pcinit 1374                           __ramtop 1000  
                         __ptext0 10F2                           __ptext1 1450  
                         __ptext2 100E                           __ptext3 12AC  
                         __ptext4 1234                           __ptext5 1444  
                         __ptext6 1412                           __ptext7 13CC  
                         __ptext8 142C                           __ptext9 1306  
       ??_clearDisplayAndCursorTo 0033                        ??_delay_ms 002A  
                      ??_delay_us 002A        displayAlphaNumeric@message 0030  
                         _sprintf 1234                    __pintcode_body 11A0  
            end_of_initialization 1398                           int_func 11A0  
                         postdec1 000FE5                           postinc0 000FEE  
         __size_of_customGraphics 000C   __end_of_clearDisplayAndCursorTo 142C  
               __size_of_LCD8init 00E4                 __size_of_LCD8send 003A  
                  __end_of_LowIsr 00C6               start_initialization 1374  
            __end_of_moveCursorTo 13F2                          ??_LowIsr 0013  
                     __pdataBANK0 0082                       __pbssCOMRAM 0035  
                   __pcstackBANK0 0060      __size_of_displayAlphaNumeric 005A  
               __size_of_delay_ms 0034                 __size_of_delay_us 002A  
                     sprintf@flag 002E                          ?_HighIsr 0001  
                       __pintcode 0008                    _cursorLocation 0035  
                     __pintcodelo 0018                       __smallconst 1000  
                       _initLCDUI 1450                    _customGraphics 1444  
                        ?_sprintf 0028                          _LCD8init 100E  
                        _LCD8send 1306                         delay_ms@i 002B  
                       delay_ms@x 0028                          _LATHbits 000F90  
                       delay_us@i 002B                         delay_us@x 0028  
          __end_of_customGraphics 1450                        ?_initLCDUI 0001  
           __size_of_moveCursorTo 0026                         copy_data0 1388  
              LCD8init@customChar 0060                  __size_of_HighIsr 122C  
                        __Hrparam 0000                          __Lrparam 0000  
        ?_clearDisplayAndCursorTo 0060                      _moveCursorTo 13CC  
                 ?_customGraphics 002F                          _delay_ms 1340  
                        _delay_us 13A2                     ?_clearDisplay 0001  
                        __ptext10 13A2                          __ptext11 1340  
                __size_of_sprintf 0078                     LCD8init@F5867 0082  
                   __size_of_main 00AE               _displayAlphaNumeric 12AC  
                        int$flags 0037                       ??_initLCDUI 002F  
            ?_displayAlphaNumeric 0030                    ??_clearDisplay 002F  
                        intlevel1 0000                          intlevel2 0000  
                       sprintf@ap 002C                         sprintf@sp 0028  
       displayAlphaNumeric@buffer 0060                      LCD8send@mode 002D  
                        sprintf@c 002F                          sprintf@f 002A  
           ??_displayAlphaNumeric 0032     customGraphics@selectedGraphic 002F  
